-- !!!! DO NOT EDIT THIS FILE -- It was automatically generated by tools/imguiUtilities/gen_luaintf.py at git repo beamng/gameengine -- DO NOT EDIT THIS FILE !!!!

local C = ffi.C -- shortcut to prevent lookups all the time
local imgui = Engine.imgui

return function(M)

--=== enum ImGuiKey ===
--===
--=== enum ImGuiMouseSource ===
--===
function M.GetCurrentContext() return imgui.GetCurrentContext() end
function M.SetCurrentContext() imgui.SetCurrentContext() end
function M.GetIO() return imgui.GetIO() end
function M.GetStyle() return imgui.GetStyle() end
function M.NewFrame() imgui.NewFrame() end
function M.EndFrame() imgui.EndFrame() end
function M.Render() imgui.Render() end
function M.GetDrawData() return imgui.GetDrawData() end
function M.ShowDemoWindow(bool_p_open)
  -- bool_p_open is optional and can be nil
  imgui.ShowDemoWindow(bool_p_open)
end
function M.ShowMetricsWindow(bool_p_open)
  -- bool_p_open is optional and can be nil
  imgui.ShowMetricsWindow(bool_p_open)
end
function M.ShowDebugLogWindow(bool_p_open)
  -- bool_p_open is optional and can be nil
  imgui.ShowDebugLogWindow(bool_p_open)
end
function M.ShowStackToolWindow(bool_p_open)
  -- bool_p_open is optional and can be nil
  imgui.ShowStackToolWindow(bool_p_open)
end
function M.ShowAboutWindow(bool_p_open)
  -- bool_p_open is optional and can be nil
  imgui.ShowAboutWindow(bool_p_open)
end
function M.ShowStyleEditor(ImGuiStyle_ref)
  -- ImGuiStyle_ref is optional and can be nil
  imgui.ShowStyleEditor(ImGuiStyle_ref)
end
function M.ShowStyleSelector(string_label)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ShowStyleSelector' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ShowStyleSelector(string_label)
end
function M.ShowFontSelector(string_label)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ShowFontSelector' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.ShowFontSelector(string_label)
end
function M.ShowUserGuide() imgui.ShowUserGuide() end
function M.GetVersion() return imgui.GetVersion() end
function M.StyleColorsDark(ImGuiStyle_dst)
  -- ImGuiStyle_dst is optional and can be nil
  imgui.StyleColorsDark(ImGuiStyle_dst)
end
function M.StyleColorsLight(ImGuiStyle_dst)
  -- ImGuiStyle_dst is optional and can be nil
  imgui.StyleColorsLight(ImGuiStyle_dst)
end
function M.StyleColorsClassic(ImGuiStyle_dst)
  -- ImGuiStyle_dst is optional and can be nil
  imgui.StyleColorsClassic(ImGuiStyle_dst)
end
function M.Begin(string_name, bool_p_open, ImGuiWindowFlags_flags)
  -- bool_p_open is optional and can be nil
  if ImGuiWindowFlags_flags == nil then ImGuiWindowFlags_flags = 0 end
  if string_name == nil then log("E", "", "Parameter 'string_name' of function 'Begin' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.Begin(string_name, bool_p_open, ImGuiWindowFlags_flags)
end
function M.End() imgui.End() end
function M.BeginChild1(string_str_id, ImVec2_size, bool_border, ImGuiWindowFlags_flags)
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if bool_border == nil then bool_border = false end
  if ImGuiWindowFlags_flags == nil then ImGuiWindowFlags_flags = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'BeginChild1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginChild1(string_str_id, ImVec2_size, bool_border, ImGuiWindowFlags_flags)
end
function M.BeginChild2(ImGuiID_id, ImVec2_size, bool_border, ImGuiWindowFlags_flags)
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if bool_border == nil then bool_border = false end
  if ImGuiWindowFlags_flags == nil then ImGuiWindowFlags_flags = 0 end
  return imgui.BeginChild2(ImGuiID_id, ImVec2_size, bool_border, ImGuiWindowFlags_flags)
end
function M.EndChild() imgui.EndChild() end
function M.IsWindowAppearing() return imgui.IsWindowAppearing() end
function M.IsWindowCollapsed() return imgui.IsWindowCollapsed() end
function M.IsWindowFocused(ImGuiFocusedFlags_flags)
  if ImGuiFocusedFlags_flags == nil then ImGuiFocusedFlags_flags = 0 end
  return imgui.IsWindowFocused(ImGuiFocusedFlags_flags)
end
function M.IsWindowHovered(ImGuiHoveredFlags_flags)
  if ImGuiHoveredFlags_flags == nil then ImGuiHoveredFlags_flags = 0 end
  return imgui.IsWindowHovered(ImGuiHoveredFlags_flags)
end
function M.GetWindowDrawList() return imgui.GetWindowDrawList() end
function M.GetWindowDpiScale() return imgui.GetWindowDpiScale() end
function M.GetWindowPos() return imgui.GetWindowPos() end
function M.GetWindowSize() return imgui.GetWindowSize() end
function M.GetWindowWidth() return imgui.GetWindowWidth() end
function M.GetWindowHeight() return imgui.GetWindowHeight() end
function M.GetWindowViewport() return imgui.GetWindowViewport() end
function M.SetNextWindowPos(ImVec2_pos, ImGuiCond_cond, ImVec2_pivot)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  if ImVec2_pivot == nil then ImVec2_pivot = M.ImVec2(0,0) end
  imgui.SetNextWindowPos(ImVec2_pos, ImGuiCond_cond, ImVec2_pivot)
end
function M.SetNextWindowSize(ImVec2_size, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetNextWindowSize(ImVec2_size, ImGuiCond_cond)
end
function M.SetNextWindowSizeConstraints(ImVec2_size_min, ImVec2_size_max, ImGuiSizeCallback_custom_callback, void_custom_callback_data)
  -- ImGuiSizeCallback_custom_callback is optional and can be nil
  -- void_custom_callback_data is optional and can be nil
  imgui.SetNextWindowSizeConstraints(ImVec2_size_min, ImVec2_size_max, ImGuiSizeCallback_custom_callback, void_custom_callback_data)
end
function M.SetNextWindowContentSize(ImVec2_size) imgui.SetNextWindowContentSize(ImVec2_size) end
function M.SetNextWindowCollapsed(bool_collapsed, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetNextWindowCollapsed(bool_collapsed, ImGuiCond_cond)
end
function M.SetNextWindowFocus() imgui.SetNextWindowFocus() end
function M.SetNextWindowScroll(ImVec2_scroll) imgui.SetNextWindowScroll(ImVec2_scroll) end
function M.SetNextWindowBgAlpha(float_alpha) imgui.SetNextWindowBgAlpha(float_alpha) end
function M.SetNextWindowViewport(ImGuiID_viewport_id) imgui.SetNextWindowViewport(ImGuiID_viewport_id) end
function M.SetWindowPos1(ImVec2_pos, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetWindowPos1(ImVec2_pos, ImGuiCond_cond)
end
function M.SetWindowSize1(ImVec2_size, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetWindowSize1(ImVec2_size, ImGuiCond_cond)
end
function M.SetWindowCollapsed1(bool_collapsed, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetWindowCollapsed1(bool_collapsed, ImGuiCond_cond)
end
function M.SetWindowFocus1() imgui.SetWindowFocus1() end
function M.SetWindowFontScale(float_scale) imgui.SetWindowFontScale(float_scale) end
function M.SetWindowPos2(string_name, ImVec2_pos, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  if string_name == nil then log("E", "", "Parameter 'string_name' of function 'SetWindowPos2' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SetWindowPos2(string_name, ImVec2_pos, ImGuiCond_cond)
end
function M.SetWindowSize2(string_name, ImVec2_size, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  if string_name == nil then log("E", "", "Parameter 'string_name' of function 'SetWindowSize2' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SetWindowSize2(string_name, ImVec2_size, ImGuiCond_cond)
end
function M.SetWindowCollapsed2(string_name, bool_collapsed, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  if string_name == nil then log("E", "", "Parameter 'string_name' of function 'SetWindowCollapsed2' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SetWindowCollapsed2(string_name, bool_collapsed, ImGuiCond_cond)
end
function M.SetWindowFocus2(string_name)
  if string_name == nil then log("E", "", "Parameter 'string_name' of function 'SetWindowFocus2' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SetWindowFocus2(string_name)
end
function M.GetContentRegionAvail() return imgui.GetContentRegionAvail() end
function M.GetContentRegionMax() return imgui.GetContentRegionMax() end
function M.GetWindowContentRegionMin() return imgui.GetWindowContentRegionMin() end
function M.GetWindowContentRegionMax() return imgui.GetWindowContentRegionMax() end
function M.GetScrollX() return imgui.GetScrollX() end
function M.GetScrollY() return imgui.GetScrollY() end
function M.SetScrollX(float_scroll_x) imgui.SetScrollX(float_scroll_x) end
function M.SetScrollY(float_scroll_y) imgui.SetScrollY(float_scroll_y) end
function M.GetScrollMaxX() return imgui.GetScrollMaxX() end
function M.GetScrollMaxY() return imgui.GetScrollMaxY() end
function M.SetScrollHereX(float_center_x_ratio)
  if float_center_x_ratio == nil then float_center_x_ratio = 0.5 end
  imgui.SetScrollHereX(float_center_x_ratio)
end
function M.SetScrollHereY(float_center_y_ratio)
  if float_center_y_ratio == nil then float_center_y_ratio = 0.5 end
  imgui.SetScrollHereY(float_center_y_ratio)
end
function M.SetScrollFromPosX(float_local_x, float_center_x_ratio)
  if float_center_x_ratio == nil then float_center_x_ratio = 0.5 end
  imgui.SetScrollFromPosX(float_local_x, float_center_x_ratio)
end
function M.SetScrollFromPosY(float_local_y, float_center_y_ratio)
  if float_center_y_ratio == nil then float_center_y_ratio = 0.5 end
  imgui.SetScrollFromPosY(float_local_y, float_center_y_ratio)
end
function M.PushFont(ImFont_font)
  if ImFont_font == nil then log("E", "", "Parameter 'ImFont_font' of function 'PushFont' cannot be nil, as the c type is 'ImFont *'") ; return end
  imgui.PushFont(ImFont_font)
end
function M.PopFont() imgui.PopFont() end
function M.PushStyleColor1(ImGuiCol_idx, ImU32_col) imgui.PushStyleColor1(ImGuiCol_idx, ImU32_col) end
function M.PushStyleColor2(ImGuiCol_idx, ImVec4_col) imgui.PushStyleColor2(ImGuiCol_idx, ImVec4_col) end
function M.PopStyleColor(int_count)
  if int_count == nil then int_count = 1 end
  imgui.PopStyleColor(int_count)
end
function M.PushStyleVar1(ImGuiStyleVar_idx, float_val) imgui.PushStyleVar1(ImGuiStyleVar_idx, float_val) end
function M.PushStyleVar2(ImGuiStyleVar_idx, ImVec2_val) imgui.PushStyleVar2(ImGuiStyleVar_idx, ImVec2_val) end
function M.PopStyleVar(int_count)
  if int_count == nil then int_count = 1 end
  imgui.PopStyleVar(int_count)
end
function M.PushTabStop(bool_tab_stop) imgui.PushTabStop(bool_tab_stop) end
function M.PopTabStop() imgui.PopTabStop() end
function M.PushButtonRepeat(_repeat) imgui.PushButtonRepeat(_repeat) end
function M.PopButtonRepeat() imgui.PopButtonRepeat() end
function M.PushItemWidth(float_item_width) imgui.PushItemWidth(float_item_width) end
function M.PopItemWidth() imgui.PopItemWidth() end
function M.SetNextItemWidth(float_item_width) imgui.SetNextItemWidth(float_item_width) end
function M.CalcItemWidth() return imgui.CalcItemWidth() end
function M.PushTextWrapPos(float_wrap_local_pos_x)
  if float_wrap_local_pos_x == nil then float_wrap_local_pos_x = 0 end
  imgui.PushTextWrapPos(float_wrap_local_pos_x)
end
function M.PopTextWrapPos() imgui.PopTextWrapPos() end
function M.GetFont() return imgui.GetFont() end
function M.GetFontSize() return imgui.GetFontSize() end
function M.GetFontTexUvWhitePixel() return imgui.GetFontTexUvWhitePixel() end
function M.GetColorU321(ImGuiCol_idx, float_alpha_mul)
  if float_alpha_mul == nil then float_alpha_mul = 1 end
  return imgui.GetColorU321(ImGuiCol_idx, float_alpha_mul)
end
function M.GetColorU322(ImVec4_col) return imgui.GetColorU322(ImVec4_col) end
function M.GetColorU323(ImU32_col) return imgui.GetColorU323(ImU32_col) end
function M.GetStyleColorVec4(ImGuiCol_idx) return imgui.GetStyleColorVec4(ImGuiCol_idx) end
function M.Separator() imgui.Separator() end
function M.SameLine(float_offset_from_start_x, float_spacing)
  if float_offset_from_start_x == nil then float_offset_from_start_x = 0 end
  if float_spacing == nil then float_spacing = -1 end
  imgui.SameLine(float_offset_from_start_x, float_spacing)
end
function M.NewLine() imgui.NewLine() end
function M.Spacing() imgui.Spacing() end
function M.Dummy(ImVec2_size) imgui.Dummy(ImVec2_size) end
function M.Indent(float_indent_w)
  if float_indent_w == nil then float_indent_w = 0 end
  imgui.Indent(float_indent_w)
end
function M.Unindent(float_indent_w)
  if float_indent_w == nil then float_indent_w = 0 end
  imgui.Unindent(float_indent_w)
end
function M.BeginGroup() imgui.BeginGroup() end
function M.EndGroup() imgui.EndGroup() end
function M.GetCursorPos() return imgui.GetCursorPos() end
function M.GetCursorPosX() return imgui.GetCursorPosX() end
function M.GetCursorPosY() return imgui.GetCursorPosY() end
function M.SetCursorPos(ImVec2_local_pos) imgui.SetCursorPos(ImVec2_local_pos) end
function M.SetCursorPosX(float_local_x) imgui.SetCursorPosX(float_local_x) end
function M.SetCursorPosY(float_local_y) imgui.SetCursorPosY(float_local_y) end
function M.GetCursorStartPos() return imgui.GetCursorStartPos() end
function M.GetCursorScreenPos() return imgui.GetCursorScreenPos() end
function M.SetCursorScreenPos(ImVec2_pos) imgui.SetCursorScreenPos(ImVec2_pos) end
function M.AlignTextToFramePadding() imgui.AlignTextToFramePadding() end
function M.GetTextLineHeight() return imgui.GetTextLineHeight() end
function M.GetTextLineHeightWithSpacing() return imgui.GetTextLineHeightWithSpacing() end
function M.GetFrameHeight() return imgui.GetFrameHeight() end
function M.GetFrameHeightWithSpacing() return imgui.GetFrameHeightWithSpacing() end
function M.PushID1(string_str_id)
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'PushID1' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.PushID1(string_str_id)
end
function M.PushID2(string_str_id_begin, string_str_id_end)
  if string_str_id_begin == nil then log("E", "", "Parameter 'string_str_id_begin' of function 'PushID2' cannot be nil, as the c type is 'const char *'") ; return end
  if string_str_id_end == nil then log("E", "", "Parameter 'string_str_id_end' of function 'PushID2' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.PushID2(string_str_id_begin, string_str_id_end)
end
function M.PushID3(void_ptr_id)
  if void_ptr_id == nil then log("E", "", "Parameter 'void_ptr_id' of function 'PushID3' cannot be nil, as the c type is 'const void *'") ; return end
  imgui.PushID3(void_ptr_id)
end
function M.PushID4(int_int_id) imgui.PushID4(int_int_id) end
function M.PopID() imgui.PopID() end
function M.GetID1(string_str_id)
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'GetID1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.GetID1(string_str_id)
end
function M.GetID2(string_str_id_begin, string_str_id_end)
  if string_str_id_begin == nil then log("E", "", "Parameter 'string_str_id_begin' of function 'GetID2' cannot be nil, as the c type is 'const char *'") ; return end
  if string_str_id_end == nil then log("E", "", "Parameter 'string_str_id_end' of function 'GetID2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.GetID2(string_str_id_begin, string_str_id_end)
end
function M.GetID3(void_ptr_id)
  if void_ptr_id == nil then log("E", "", "Parameter 'void_ptr_id' of function 'GetID3' cannot be nil, as the c type is 'const void *'") ; return end
  return imgui.GetID3(void_ptr_id)
end
function M.TextUnformatted(string_text, string_text_end)
  -- string_text_end is optional and can be nil
  if string_text == nil then log("E", "", "Parameter 'string_text' of function 'TextUnformatted' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.TextUnformatted(string_text, string_text_end)
end
function M.Text(string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'Text' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.Text(string_fmt)
end
function M.TextColored(ImVec4_col, string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TextColored' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.TextColored(ImVec4_col, string_fmt)
end
function M.TextDisabled(string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TextDisabled' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.TextDisabled(string_fmt)
end
function M.TextWrapped(string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TextWrapped' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.TextWrapped(string_fmt)
end
function M.LabelText(string_label, string_fmt, ...)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'LabelText' cannot be nil, as the c type is 'const char *'") ; return end
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'LabelText' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.LabelText(string_label, string_fmt)
end
function M.BulletText(string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'BulletText' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.BulletText(string_fmt)
end
function M.SeparatorText(string_label)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SeparatorText' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SeparatorText(string_label)
end
function M.Button(string_label, ImVec2_size)
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Button' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.Button(string_label, ImVec2_size)
end
function M.SmallButton(string_label)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SmallButton' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SmallButton(string_label)
end
function M.InvisibleButton(string_str_id, ImVec2_size, ImGuiButtonFlags_flags)
  if ImGuiButtonFlags_flags == nil then ImGuiButtonFlags_flags = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'InvisibleButton' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InvisibleButton(string_str_id, ImVec2_size, ImGuiButtonFlags_flags)
end
function M.ArrowButton(string_str_id, ImGuiDir_dir)
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'ArrowButton' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ArrowButton(string_str_id, ImGuiDir_dir)
end
function M.Checkbox(string_label, bool_v)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Checkbox' cannot be nil, as the c type is 'const char *'") ; return end
  if bool_v == nil then log("E", "", "Parameter 'bool_v' of function 'Checkbox' cannot be nil, as the c type is 'bool *'") ; return end
  return imgui.Checkbox(string_label, bool_v)
end
function M.CheckboxFlags1(string_label, int_flags, int_flags_value)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'CheckboxFlags1' cannot be nil, as the c type is 'const char *'") ; return end
  if int_flags == nil then log("E", "", "Parameter 'int_flags' of function 'CheckboxFlags1' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.CheckboxFlags1(string_label, int_flags, int_flags_value)
end
function M.CheckboxFlags2(string_label, int_flags, int_flags_value)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'CheckboxFlags2' cannot be nil, as the c type is 'const char *'") ; return end
  if int_flags == nil then log("E", "", "Parameter 'int_flags' of function 'CheckboxFlags2' cannot be nil, as the c type is 'unsigned int *'") ; return end
  return imgui.CheckboxFlags2(string_label, int_flags, int_flags_value)
end
function M.RadioButton1(string_label, bool_active)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'RadioButton1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.RadioButton1(string_label, bool_active)
end
function M.RadioButton2(string_label, int_v, int_v_button)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'RadioButton2' cannot be nil, as the c type is 'const char *'") ; return end
  if int_v == nil then log("E", "", "Parameter 'int_v' of function 'RadioButton2' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.RadioButton2(string_label, int_v, int_v_button)
end
function M.ProgressBar(float_fraction, ImVec2_size_arg, string_overlay)
  if ImVec2_size_arg == nil then ImVec2_size_arg = M.ImVec2(-FLT_MIN,0) end
  -- string_overlay is optional and can be nil
  imgui.ProgressBar(float_fraction, ImVec2_size_arg, string_overlay)
end
function M.Bullet() imgui.Bullet() end
function M.Image(ImTextureID_user_texture_id, ImVec2_size, ImVec2_uv0, ImVec2_uv1, ImVec4_tint_col, ImVec4_border_col)
  if ImVec2_uv0 == nil then ImVec2_uv0 = M.ImVec2(0,0) end
  if ImVec2_uv1 == nil then ImVec2_uv1 = M.ImVec2(1,1) end
  if ImVec4_tint_col == nil then ImVec4_tint_col = M.ImVec4(1,1,1,1) end
  if ImVec4_border_col == nil then ImVec4_border_col = M.ImVec4(0,0,0,0) end
  imgui.Image(ImTextureID_user_texture_id, ImVec2_size, ImVec2_uv0, ImVec2_uv1, ImVec4_tint_col, ImVec4_border_col)
end
function M.ImageButton(string_str_id, ImTextureID_user_texture_id, ImVec2_size, ImVec2_uv0, ImVec2_uv1, ImVec4_bg_col, ImVec4_tint_col)
  if ImVec2_uv0 == nil then ImVec2_uv0 = M.ImVec2(0,0) end
  if ImVec2_uv1 == nil then ImVec2_uv1 = M.ImVec2(1,1) end
  if ImVec4_bg_col == nil then ImVec4_bg_col = M.ImVec4(0,0,0,0) end
  if ImVec4_tint_col == nil then ImVec4_tint_col = M.ImVec4(1,1,1,1) end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'ImageButton' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ImageButton(string_str_id, ImTextureID_user_texture_id, ImVec2_size, ImVec2_uv0, ImVec2_uv1, ImVec4_bg_col, ImVec4_tint_col)
end
function M.BeginCombo(string_label, string_preview_value, ImGuiComboFlags_flags)
  if ImGuiComboFlags_flags == nil then ImGuiComboFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'BeginCombo' cannot be nil, as the c type is 'const char *'") ; return end
  if string_preview_value == nil then log("E", "", "Parameter 'string_preview_value' of function 'BeginCombo' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginCombo(string_label, string_preview_value, ImGuiComboFlags_flags)
end
function M.EndCombo() imgui.EndCombo() end
function M.Combo1(string_label, int_current_item, charconstPtr_items, int_items_count, int_popup_max_height_in_items)
  if int_popup_max_height_in_items == nil then int_popup_max_height_in_items = -1 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Combo1' cannot be nil, as the c type is 'const char *'") ; return end
  if int_current_item == nil then log("E", "", "Parameter 'int_current_item' of function 'Combo1' cannot be nil, as the c type is 'int *'") ; return end
  if charconstPtr_items == nil then log("E", "", "Parameter 'charconstPtr_items' of function 'Combo1' cannot be nil, as the c type is 'const char *const[]'") ; return end
  return imgui.Combo1(string_label, int_current_item, charconstPtr_items, int_items_count, int_popup_max_height_in_items)
end
function M.Combo2(string_label, int_current_item, string_items_separated_by_zeros, int_popup_max_height_in_items)
  if int_popup_max_height_in_items == nil then int_popup_max_height_in_items = -1 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Combo2' cannot be nil, as the c type is 'const char *'") ; return end
  if int_current_item == nil then log("E", "", "Parameter 'int_current_item' of function 'Combo2' cannot be nil, as the c type is 'int *'") ; return end
  if string_items_separated_by_zeros == nil then log("E", "", "Parameter 'string_items_separated_by_zeros' of function 'Combo2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.Combo2(string_label, int_current_item, string_items_separated_by_zeros, int_popup_max_height_in_items)
end
function M.Combo3(string_label, int_current_item, functionPtr_items_getter, void_data, int_items_count, int_popup_max_height_in_items)
  if int_popup_max_height_in_items == nil then int_popup_max_height_in_items = -1 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Combo3' cannot be nil, as the c type is 'const char *'") ; return end
  if int_current_item == nil then log("E", "", "Parameter 'int_current_item' of function 'Combo3' cannot be nil, as the c type is 'int *'") ; return end
  if functionPtr_items_getter == nil then log("E", "", "Parameter 'functionPtr_items_getter' of function 'Combo3' cannot be nil, as the c type is 'bool (*)(void *, int, const char **)'") ; return end
  if void_data == nil then log("E", "", "Parameter 'void_data' of function 'Combo3' cannot be nil, as the c type is 'void *'") ; return end
  return imgui.Combo3(string_label, int_current_item, functionPtr_items_getter, void_data, int_items_count, int_popup_max_height_in_items)
end
function M.DragFloat(string_label, float_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if float_v_min == nil then float_v_min = 0 end
  if float_v_max == nil then float_v_max = 0 end
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragFloat' cannot be nil, as the c type is 'const char *'") ; return end
  if float_v == nil then log("E", "", "Parameter 'float_v' of function 'DragFloat' cannot be nil, as the c type is 'float *'") ; return end
  return imgui.DragFloat(string_label, float_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragFloat2(string_label, floatPtr_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if float_v_min == nil then float_v_min = 0 end
  if float_v_max == nil then float_v_max = 0 end
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragFloat2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DragFloat2(string_label, floatPtr_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragFloat3(string_label, floatPtr_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if float_v_min == nil then float_v_min = 0 end
  if float_v_max == nil then float_v_max = 0 end
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragFloat3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DragFloat3(string_label, floatPtr_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragFloat4(string_label, floatPtr_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if float_v_min == nil then float_v_min = 0 end
  if float_v_max == nil then float_v_max = 0 end
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragFloat4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DragFloat4(string_label, floatPtr_v, float_v_speed, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragFloatRange2(string_label, float_v_current_min, float_v_current_max, float_v_speed, float_v_min, float_v_max, string_format, string_format_max, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if float_v_min == nil then float_v_min = 0 end
  if float_v_max == nil then float_v_max = 0 end
  if string_format == nil then string_format = "%.3f" end
  -- string_format_max is optional and can be nil
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragFloatRange2' cannot be nil, as the c type is 'const char *'") ; return end
  if float_v_current_min == nil then log("E", "", "Parameter 'float_v_current_min' of function 'DragFloatRange2' cannot be nil, as the c type is 'float *'") ; return end
  if float_v_current_max == nil then log("E", "", "Parameter 'float_v_current_max' of function 'DragFloatRange2' cannot be nil, as the c type is 'float *'") ; return end
  return imgui.DragFloatRange2(string_label, float_v_current_min, float_v_current_max, float_v_speed, float_v_min, float_v_max, string_format, string_format_max, ImGuiSliderFlags_flags)
end
function M.DragInt(string_label, int_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if int_v_min == nil then int_v_min = 0 end
  if int_v_max == nil then int_v_max = 0 end
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragInt' cannot be nil, as the c type is 'const char *'") ; return end
  if int_v == nil then log("E", "", "Parameter 'int_v' of function 'DragInt' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.DragInt(string_label, int_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragInt2(string_label, intPtr_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if int_v_min == nil then int_v_min = 0 end
  if int_v_max == nil then int_v_max = 0 end
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragInt2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DragInt2(string_label, intPtr_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragInt3(string_label, intPtr_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if int_v_min == nil then int_v_min = 0 end
  if int_v_max == nil then int_v_max = 0 end
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragInt3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DragInt3(string_label, intPtr_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragInt4(string_label, intPtr_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if int_v_min == nil then int_v_min = 0 end
  if int_v_max == nil then int_v_max = 0 end
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragInt4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DragInt4(string_label, intPtr_v, float_v_speed, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.DragIntRange2(string_label, int_v_current_min, int_v_current_max, float_v_speed, int_v_min, int_v_max, string_format, string_format_max, ImGuiSliderFlags_flags)
  if float_v_speed == nil then float_v_speed = 1 end
  if int_v_min == nil then int_v_min = 0 end
  if int_v_max == nil then int_v_max = 0 end
  if string_format == nil then string_format = "%d" end
  -- string_format_max is optional and can be nil
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'DragIntRange2' cannot be nil, as the c type is 'const char *'") ; return end
  if int_v_current_min == nil then log("E", "", "Parameter 'int_v_current_min' of function 'DragIntRange2' cannot be nil, as the c type is 'int *'") ; return end
  if int_v_current_max == nil then log("E", "", "Parameter 'int_v_current_max' of function 'DragIntRange2' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.DragIntRange2(string_label, int_v_current_min, int_v_current_max, float_v_speed, int_v_min, int_v_max, string_format, string_format_max, ImGuiSliderFlags_flags)
end
function M.SliderFloat(string_label, float_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderFloat' cannot be nil, as the c type is 'const char *'") ; return end
  if float_v == nil then log("E", "", "Parameter 'float_v' of function 'SliderFloat' cannot be nil, as the c type is 'float *'") ; return end
  return imgui.SliderFloat(string_label, float_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderFloat2(string_label, floatPtr_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderFloat2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SliderFloat2(string_label, floatPtr_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderFloat3(string_label, floatPtr_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderFloat3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SliderFloat3(string_label, floatPtr_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderFloat4(string_label, floatPtr_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderFloat4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SliderFloat4(string_label, floatPtr_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderAngle(string_label, float_v_rad, float_v_degrees_min, float_v_degrees_max, string_format, ImGuiSliderFlags_flags)
  if float_v_degrees_min == nil then float_v_degrees_min = -360 end
  if float_v_degrees_max == nil then float_v_degrees_max = 360 end
  if string_format == nil then string_format = "%.0f deg" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderAngle' cannot be nil, as the c type is 'const char *'") ; return end
  if float_v_rad == nil then log("E", "", "Parameter 'float_v_rad' of function 'SliderAngle' cannot be nil, as the c type is 'float *'") ; return end
  return imgui.SliderAngle(string_label, float_v_rad, float_v_degrees_min, float_v_degrees_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderInt(string_label, int_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderInt' cannot be nil, as the c type is 'const char *'") ; return end
  if int_v == nil then log("E", "", "Parameter 'int_v' of function 'SliderInt' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.SliderInt(string_label, int_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderInt2(string_label, intPtr_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderInt2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SliderInt2(string_label, intPtr_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderInt3(string_label, intPtr_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderInt3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SliderInt3(string_label, intPtr_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.SliderInt4(string_label, intPtr_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'SliderInt4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.SliderInt4(string_label, intPtr_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.VSliderFloat(string_label, ImVec2_size, float_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'VSliderFloat' cannot be nil, as the c type is 'const char *'") ; return end
  if float_v == nil then log("E", "", "Parameter 'float_v' of function 'VSliderFloat' cannot be nil, as the c type is 'float *'") ; return end
  return imgui.VSliderFloat(string_label, ImVec2_size, float_v, float_v_min, float_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.VSliderInt(string_label, ImVec2_size, int_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
  if string_format == nil then string_format = "%d" end
  if ImGuiSliderFlags_flags == nil then ImGuiSliderFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'VSliderInt' cannot be nil, as the c type is 'const char *'") ; return end
  if int_v == nil then log("E", "", "Parameter 'int_v' of function 'VSliderInt' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.VSliderInt(string_label, ImVec2_size, int_v, int_v_min, int_v_max, string_format, ImGuiSliderFlags_flags)
end
function M.InputText(string_label, string_buf, size_t_buf_size, ImGuiInputTextFlags_flags, ImGuiInputTextCallback_callback, void_user_data)
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  -- ImGuiInputTextCallback_callback is optional and can be nil
  -- void_user_data is optional and can be nil
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputText' cannot be nil, as the c type is 'const char *'") ; return end
  if string_buf == nil then log("E", "", "Parameter 'string_buf' of function 'InputText' cannot be nil, as the c type is 'char *'") ; return end
  return imgui.InputText(string_label, string_buf, size_t_buf_size, ImGuiInputTextFlags_flags, nil, void_user_data)
end
function M.InputTextMultiline(string_label, string_buf, size_t_buf_size, ImVec2_size, ImGuiInputTextFlags_flags, ImGuiInputTextCallback_callback, void_user_data)
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  -- ImGuiInputTextCallback_callback is optional and can be nil
  -- void_user_data is optional and can be nil
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputTextMultiline' cannot be nil, as the c type is 'const char *'") ; return end
  if string_buf == nil then log("E", "", "Parameter 'string_buf' of function 'InputTextMultiline' cannot be nil, as the c type is 'char *'") ; return end
  return imgui.InputTextMultiline(string_label, string_buf, size_t_buf_size, ImVec2_size, ImGuiInputTextFlags_flags, nil, void_user_data)
end
function M.InputTextWithHint(string_label, string_hint, string_buf, size_t_buf_size, ImGuiInputTextFlags_flags, ImGuiInputTextCallback_callback, void_user_data)
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  -- ImGuiInputTextCallback_callback is optional and can be nil
  -- void_user_data is optional and can be nil
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputTextWithHint' cannot be nil, as the c type is 'const char *'") ; return end
  if string_hint == nil then log("E", "", "Parameter 'string_hint' of function 'InputTextWithHint' cannot be nil, as the c type is 'const char *'") ; return end
  if string_buf == nil then log("E", "", "Parameter 'string_buf' of function 'InputTextWithHint' cannot be nil, as the c type is 'char *'") ; return end
  return imgui.InputTextWithHint(string_label, string_hint, string_buf, size_t_buf_size, ImGuiInputTextFlags_flags, nil, void_user_data)
end
function M.InputFloat(string_label, float_v, float_step, float_step_fast, string_format, ImGuiInputTextFlags_flags)
  if float_step == nil then float_step = 0 end
  if float_step_fast == nil then float_step_fast = 0 end
  if string_format == nil then string_format = "%.3f" end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputFloat' cannot be nil, as the c type is 'const char *'") ; return end
  if float_v == nil then log("E", "", "Parameter 'float_v' of function 'InputFloat' cannot be nil, as the c type is 'float *'") ; return end
  return imgui.InputFloat(string_label, float_v, float_step, float_step_fast, string_format, ImGuiInputTextFlags_flags)
end
function M.InputFloat2(string_label, floatPtr_v, string_format, ImGuiInputTextFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputFloat2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InputFloat2(string_label, floatPtr_v, string_format, ImGuiInputTextFlags_flags)
end
function M.InputFloat3(string_label, floatPtr_v, string_format, ImGuiInputTextFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputFloat3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InputFloat3(string_label, floatPtr_v, string_format, ImGuiInputTextFlags_flags)
end
function M.InputFloat4(string_label, floatPtr_v, string_format, ImGuiInputTextFlags_flags)
  if string_format == nil then string_format = "%.3f" end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputFloat4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InputFloat4(string_label, floatPtr_v, string_format, ImGuiInputTextFlags_flags)
end
function M.InputInt(string_label, int_v, int_step, int_step_fast, ImGuiInputTextFlags_flags)
  if int_step == nil then int_step = 1 end
  if int_step_fast == nil then int_step_fast = 100 end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputInt' cannot be nil, as the c type is 'const char *'") ; return end
  if int_v == nil then log("E", "", "Parameter 'int_v' of function 'InputInt' cannot be nil, as the c type is 'int *'") ; return end
  return imgui.InputInt(string_label, int_v, int_step, int_step_fast, ImGuiInputTextFlags_flags)
end
function M.InputInt2(string_label, intPtr_v, ImGuiInputTextFlags_flags)
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputInt2' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InputInt2(string_label, intPtr_v, ImGuiInputTextFlags_flags)
end
function M.InputInt3(string_label, intPtr_v, ImGuiInputTextFlags_flags)
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputInt3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InputInt3(string_label, intPtr_v, ImGuiInputTextFlags_flags)
end
function M.InputInt4(string_label, intPtr_v, ImGuiInputTextFlags_flags)
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputInt4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.InputInt4(string_label, intPtr_v, ImGuiInputTextFlags_flags)
end
function M.InputDouble(string_label, double_v, double_step, double_step_fast, string_format, ImGuiInputTextFlags_flags)
  if double_step == nil then double_step = 0 end
  if double_step_fast == nil then double_step_fast = 0 end
  if string_format == nil then string_format = "%.6f" end
  if ImGuiInputTextFlags_flags == nil then ImGuiInputTextFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'InputDouble' cannot be nil, as the c type is 'const char *'") ; return end
  if double_v == nil then log("E", "", "Parameter 'double_v' of function 'InputDouble' cannot be nil, as the c type is 'double *'") ; return end
  return imgui.InputDouble(string_label, double_v, double_step, double_step_fast, string_format, ImGuiInputTextFlags_flags)
end
function M.ColorEdit3(string_label, floatPtr_col, ImGuiColorEditFlags_flags)
  if ImGuiColorEditFlags_flags == nil then ImGuiColorEditFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ColorEdit3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ColorEdit3(string_label, floatPtr_col, ImGuiColorEditFlags_flags)
end
function M.ColorEdit4(string_label, floatPtr_col, ImGuiColorEditFlags_flags)
  if ImGuiColorEditFlags_flags == nil then ImGuiColorEditFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ColorEdit4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ColorEdit4(string_label, floatPtr_col, ImGuiColorEditFlags_flags)
end
function M.ColorPicker3(string_label, floatPtr_col, ImGuiColorEditFlags_flags)
  if ImGuiColorEditFlags_flags == nil then ImGuiColorEditFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ColorPicker3' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ColorPicker3(string_label, floatPtr_col, ImGuiColorEditFlags_flags)
end
function M.ColorPicker4(string_label, floatPtr_col, ImGuiColorEditFlags_flags, float_ref_col)
  if ImGuiColorEditFlags_flags == nil then ImGuiColorEditFlags_flags = 0 end
  -- float_ref_col is optional and can be nil
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ColorPicker4' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ColorPicker4(string_label, floatPtr_col, ImGuiColorEditFlags_flags, float_ref_col)
end
function M.ColorButton(string_desc_id, ImVec4_col, ImGuiColorEditFlags_flags, ImVec2_size)
  if ImGuiColorEditFlags_flags == nil then ImGuiColorEditFlags_flags = 0 end
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if string_desc_id == nil then log("E", "", "Parameter 'string_desc_id' of function 'ColorButton' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.ColorButton(string_desc_id, ImVec4_col, ImGuiColorEditFlags_flags, ImVec2_size)
end
function M.SetColorEditOptions(ImGuiColorEditFlags_flags) imgui.SetColorEditOptions(ImGuiColorEditFlags_flags) end
function M.TreeNode1(string_label)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'TreeNode1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.TreeNode1(string_label)
end
function M.TreeNode2(string_str_id, string_fmt, ...)
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'TreeNode2' cannot be nil, as the c type is 'const char *'") ; return end
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TreeNode2' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  return imgui.TreeNode2(string_str_id, string_fmt)
end
function M.TreeNode3(void_ptr_id, string_fmt, ...)
  if void_ptr_id == nil then log("E", "", "Parameter 'void_ptr_id' of function 'TreeNode3' cannot be nil, as the c type is 'const void *'") ; return end
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TreeNode3' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  return imgui.TreeNode3(void_ptr_id, string_fmt)
end
function M.TreeNodeEx1(string_label, ImGuiTreeNodeFlags_flags)
  if ImGuiTreeNodeFlags_flags == nil then ImGuiTreeNodeFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'TreeNodeEx1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.TreeNodeEx1(string_label, ImGuiTreeNodeFlags_flags)
end
function M.TreeNodeEx2(string_str_id, ImGuiTreeNodeFlags_flags, string_fmt, ...)
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'TreeNodeEx2' cannot be nil, as the c type is 'const char *'") ; return end
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TreeNodeEx2' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  return imgui.TreeNodeEx2(string_str_id, ImGuiTreeNodeFlags_flags, string_fmt)
end
function M.TreeNodeEx3(void_ptr_id, ImGuiTreeNodeFlags_flags, string_fmt, ...)
  if void_ptr_id == nil then log("E", "", "Parameter 'void_ptr_id' of function 'TreeNodeEx3' cannot be nil, as the c type is 'const void *'") ; return end
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'TreeNodeEx3' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  return imgui.TreeNodeEx3(void_ptr_id, ImGuiTreeNodeFlags_flags, string_fmt)
end
function M.TreePush1(string_str_id)
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'TreePush1' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.TreePush1(string_str_id)
end
function M.TreePush2(void_ptr_id)
  if void_ptr_id == nil then log("E", "", "Parameter 'void_ptr_id' of function 'TreePush2' cannot be nil, as the c type is 'const void *'") ; return end
  imgui.TreePush2(void_ptr_id)
end
function M.TreePop() imgui.TreePop() end
function M.GetTreeNodeToLabelSpacing() return imgui.GetTreeNodeToLabelSpacing() end
function M.CollapsingHeader1(string_label, ImGuiTreeNodeFlags_flags)
  if ImGuiTreeNodeFlags_flags == nil then ImGuiTreeNodeFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'CollapsingHeader1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.CollapsingHeader1(string_label, ImGuiTreeNodeFlags_flags)
end
function M.CollapsingHeader2(string_label, bool_p_visible, ImGuiTreeNodeFlags_flags)
  if ImGuiTreeNodeFlags_flags == nil then ImGuiTreeNodeFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'CollapsingHeader2' cannot be nil, as the c type is 'const char *'") ; return end
  if bool_p_visible == nil then log("E", "", "Parameter 'bool_p_visible' of function 'CollapsingHeader2' cannot be nil, as the c type is 'bool *'") ; return end
  return imgui.CollapsingHeader2(string_label, bool_p_visible, ImGuiTreeNodeFlags_flags)
end
function M.SetNextItemOpen(bool_is_open, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetNextItemOpen(bool_is_open, ImGuiCond_cond)
end
function M.Selectable1(string_label, bool_selected, ImGuiSelectableFlags_flags, ImVec2_size)
  if bool_selected == nil then bool_selected = false end
  if ImGuiSelectableFlags_flags == nil then ImGuiSelectableFlags_flags = 0 end
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Selectable1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.Selectable1(string_label, bool_selected, ImGuiSelectableFlags_flags, ImVec2_size)
end
function M.Selectable2(string_label, bool_p_selected, ImGuiSelectableFlags_flags, ImVec2_size)
  if ImGuiSelectableFlags_flags == nil then ImGuiSelectableFlags_flags = 0 end
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'Selectable2' cannot be nil, as the c type is 'const char *'") ; return end
  if bool_p_selected == nil then log("E", "", "Parameter 'bool_p_selected' of function 'Selectable2' cannot be nil, as the c type is 'bool *'") ; return end
  return imgui.Selectable2(string_label, bool_p_selected, ImGuiSelectableFlags_flags, ImVec2_size)
end
function M.BeginListBox(string_label, ImVec2_size)
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'BeginListBox' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginListBox(string_label, ImVec2_size)
end
function M.EndListBox() imgui.EndListBox() end
function M.ListBox1(string_label, int_current_item, charconstPtr_items, int_items_count, int_height_in_items)
  if int_height_in_items == nil then int_height_in_items = -1 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ListBox1' cannot be nil, as the c type is 'const char *'") ; return end
  if int_current_item == nil then log("E", "", "Parameter 'int_current_item' of function 'ListBox1' cannot be nil, as the c type is 'int *'") ; return end
  if charconstPtr_items == nil then log("E", "", "Parameter 'charconstPtr_items' of function 'ListBox1' cannot be nil, as the c type is 'const char *const[]'") ; return end
  return imgui.ListBox1(string_label, int_current_item, charconstPtr_items, int_items_count, int_height_in_items)
end
function M.ListBox2(string_label, int_current_item, functionPtr_items_getter, void_data, int_items_count, int_height_in_items)
  if int_height_in_items == nil then int_height_in_items = -1 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'ListBox2' cannot be nil, as the c type is 'const char *'") ; return end
  if int_current_item == nil then log("E", "", "Parameter 'int_current_item' of function 'ListBox2' cannot be nil, as the c type is 'int *'") ; return end
  if functionPtr_items_getter == nil then log("E", "", "Parameter 'functionPtr_items_getter' of function 'ListBox2' cannot be nil, as the c type is 'bool (*)(void *, int, const char **)'") ; return end
  if void_data == nil then log("E", "", "Parameter 'void_data' of function 'ListBox2' cannot be nil, as the c type is 'void *'") ; return end
  return imgui.ListBox2(string_label, int_current_item, functionPtr_items_getter, void_data, int_items_count, int_height_in_items)
end
function M.PlotLines1(string_label, float_values, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size, int_stride)
  if int_values_offset == nil then int_values_offset = 0 end
  -- string_overlay_text is optional and can be nil
  if float_scale_min == nil then float_scale_min = FLT_MAX end
  if float_scale_max == nil then float_scale_max = FLT_MAX end
  if ImVec2_graph_size == nil then ImVec2_graph_size = ImVec2(0,0) end
  if int_stride == nil then int_stride = ffi.sizeof('float') end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'PlotLines1' cannot be nil, as the c type is 'const char *'") ; return end
  if float_values == nil then log("E", "", "Parameter 'float_values' of function 'PlotLines1' cannot be nil, as the c type is 'const float *'") ; return end
  imgui.PlotLines1(string_label, float_values, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size, int_stride)
end
function M.PlotLines2(string_label, functionPtr_values_getter, void_data, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size)
  if int_values_offset == nil then int_values_offset = 0 end
  -- string_overlay_text is optional and can be nil
  if float_scale_min == nil then float_scale_min = FLT_MAX end
  if float_scale_max == nil then float_scale_max = FLT_MAX end
  if ImVec2_graph_size == nil then ImVec2_graph_size = ImVec2(0,0) end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'PlotLines2' cannot be nil, as the c type is 'const char *'") ; return end
  if functionPtr_values_getter == nil then log("E", "", "Parameter 'functionPtr_values_getter' of function 'PlotLines2' cannot be nil, as the c type is 'float (*)(void *, int)'") ; return end
  if void_data == nil then log("E", "", "Parameter 'void_data' of function 'PlotLines2' cannot be nil, as the c type is 'void *'") ; return end
  imgui.PlotLines2(string_label, functionPtr_values_getter, void_data, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size)
end
function M.PlotHistogram1(string_label, float_values, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size, int_stride)
  if int_values_offset == nil then int_values_offset = 0 end
  -- string_overlay_text is optional and can be nil
  if float_scale_min == nil then float_scale_min = FLT_MAX end
  if float_scale_max == nil then float_scale_max = FLT_MAX end
  if ImVec2_graph_size == nil then ImVec2_graph_size = ImVec2(0,0) end
  if int_stride == nil then int_stride = ffi.sizeof('float') end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'PlotHistogram1' cannot be nil, as the c type is 'const char *'") ; return end
  if float_values == nil then log("E", "", "Parameter 'float_values' of function 'PlotHistogram1' cannot be nil, as the c type is 'const float *'") ; return end
  imgui.PlotHistogram1(string_label, float_values, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size, int_stride)
end
function M.PlotHistogram2(string_label, functionPtr_values_getter, void_data, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size)
  if int_values_offset == nil then int_values_offset = 0 end
  -- string_overlay_text is optional and can be nil
  if float_scale_min == nil then float_scale_min = FLT_MAX end
  if float_scale_max == nil then float_scale_max = FLT_MAX end
  if ImVec2_graph_size == nil then ImVec2_graph_size = ImVec2(0,0) end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'PlotHistogram2' cannot be nil, as the c type is 'const char *'") ; return end
  if functionPtr_values_getter == nil then log("E", "", "Parameter 'functionPtr_values_getter' of function 'PlotHistogram2' cannot be nil, as the c type is 'float (*)(void *, int)'") ; return end
  if void_data == nil then log("E", "", "Parameter 'void_data' of function 'PlotHistogram2' cannot be nil, as the c type is 'void *'") ; return end
  imgui.PlotHistogram2(string_label, functionPtr_values_getter, void_data, int_values_count, int_values_offset, string_overlay_text, float_scale_min, float_scale_max, ImVec2_graph_size)
end
function M.Value1(string_prefix, bool_b)
  if string_prefix == nil then log("E", "", "Parameter 'string_prefix' of function 'Value1' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.Value1(string_prefix, bool_b)
end
function M.Value2(string_prefix, int_v)
  if string_prefix == nil then log("E", "", "Parameter 'string_prefix' of function 'Value2' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.Value2(string_prefix, int_v)
end
function M.Value3(string_prefix, int_v)
  if string_prefix == nil then log("E", "", "Parameter 'string_prefix' of function 'Value3' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.Value3(string_prefix, int_v)
end
function M.Value4(string_prefix, float_v, string_float_format)
  -- string_float_format is optional and can be nil
  if string_prefix == nil then log("E", "", "Parameter 'string_prefix' of function 'Value4' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.Value4(string_prefix, float_v, string_float_format)
end
function M.BeginMenuBar() return imgui.BeginMenuBar() end
function M.EndMenuBar() imgui.EndMenuBar() end
function M.BeginMainMenuBar() return imgui.BeginMainMenuBar() end
function M.EndMainMenuBar() imgui.EndMainMenuBar() end
function M.BeginMenu(string_label, bool_enabled)
  if bool_enabled == nil then bool_enabled = true end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'BeginMenu' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginMenu(string_label, bool_enabled)
end
function M.EndMenu() imgui.EndMenu() end
function M.MenuItem1(string_label, string_shortcut, bool_selected, bool_enabled)
  -- string_shortcut is optional and can be nil
  if bool_selected == nil then bool_selected = false end
  if bool_enabled == nil then bool_enabled = true end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'MenuItem1' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.MenuItem1(string_label, string_shortcut, bool_selected, bool_enabled)
end
function M.MenuItem2(string_label, string_shortcut, bool_p_selected, bool_enabled)
  if bool_enabled == nil then bool_enabled = true end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'MenuItem2' cannot be nil, as the c type is 'const char *'") ; return end
  if string_shortcut == nil then log("E", "", "Parameter 'string_shortcut' of function 'MenuItem2' cannot be nil, as the c type is 'const char *'") ; return end
  if bool_p_selected == nil then log("E", "", "Parameter 'bool_p_selected' of function 'MenuItem2' cannot be nil, as the c type is 'bool *'") ; return end
  return imgui.MenuItem2(string_label, string_shortcut, bool_p_selected, bool_enabled)
end
function M.BeginTooltip() return imgui.BeginTooltip() end
function M.EndTooltip() imgui.EndTooltip() end
function M.SetTooltip(string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'SetTooltip' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.SetTooltip(string_fmt)
end
function M.BeginItemTooltip() return imgui.BeginItemTooltip() end
function M.SetItemTooltip(string_fmt, ...)
  if string_fmt == nil then log("E", "", "Parameter 'string_fmt' of function 'SetItemTooltip' cannot be nil, as the c type is 'const char *'") ; return end
  string_fmt = string.format(string_fmt, ...)
  imgui.SetItemTooltip(string_fmt)
end
function M.BeginPopup(string_str_id, ImGuiWindowFlags_flags)
  if ImGuiWindowFlags_flags == nil then ImGuiWindowFlags_flags = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'BeginPopup' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginPopup(string_str_id, ImGuiWindowFlags_flags)
end
function M.BeginPopupModal(string_name, bool_p_open, ImGuiWindowFlags_flags)
  -- bool_p_open is optional and can be nil
  if ImGuiWindowFlags_flags == nil then ImGuiWindowFlags_flags = 0 end
  if string_name == nil then log("E", "", "Parameter 'string_name' of function 'BeginPopupModal' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginPopupModal(string_name, bool_p_open, ImGuiWindowFlags_flags)
end
function M.EndPopup() imgui.EndPopup() end
function M.OpenPopup1(string_str_id, ImGuiPopupFlags_popup_flags)
  if ImGuiPopupFlags_popup_flags == nil then ImGuiPopupFlags_popup_flags = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'OpenPopup1' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.OpenPopup1(string_str_id, ImGuiPopupFlags_popup_flags)
end
function M.OpenPopup2(ImGuiID_id, ImGuiPopupFlags_popup_flags)
  if ImGuiPopupFlags_popup_flags == nil then ImGuiPopupFlags_popup_flags = 0 end
  imgui.OpenPopup2(ImGuiID_id, ImGuiPopupFlags_popup_flags)
end
function M.OpenPopupOnItemClick(string_str_id, ImGuiPopupFlags_popup_flags)
  -- string_str_id is optional and can be nil
  if ImGuiPopupFlags_popup_flags == nil then ImGuiPopupFlags_popup_flags = 1 end
  imgui.OpenPopupOnItemClick(string_str_id, ImGuiPopupFlags_popup_flags)
end
function M.CloseCurrentPopup() imgui.CloseCurrentPopup() end
function M.BeginPopupContextItem(string_str_id, ImGuiPopupFlags_popup_flags)
  -- string_str_id is optional and can be nil
  if ImGuiPopupFlags_popup_flags == nil then ImGuiPopupFlags_popup_flags = 1 end
  return imgui.BeginPopupContextItem(string_str_id, ImGuiPopupFlags_popup_flags)
end
function M.BeginPopupContextWindow(string_str_id, ImGuiPopupFlags_popup_flags)
  -- string_str_id is optional and can be nil
  if ImGuiPopupFlags_popup_flags == nil then ImGuiPopupFlags_popup_flags = 1 end
  return imgui.BeginPopupContextWindow(string_str_id, ImGuiPopupFlags_popup_flags)
end
function M.BeginPopupContextVoid(string_str_id, ImGuiPopupFlags_popup_flags)
  -- string_str_id is optional and can be nil
  if ImGuiPopupFlags_popup_flags == nil then ImGuiPopupFlags_popup_flags = 1 end
  return imgui.BeginPopupContextVoid(string_str_id, ImGuiPopupFlags_popup_flags)
end
function M.IsPopupOpen(string_str_id, ImGuiPopupFlags_flags)
  if ImGuiPopupFlags_flags == nil then ImGuiPopupFlags_flags = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'IsPopupOpen' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.IsPopupOpen(string_str_id, ImGuiPopupFlags_flags)
end
function M.BeginTable(string_str_id, int_column, ImGuiTableFlags_flags, ImVec2_outer_size, float_inner_width)
  if ImGuiTableFlags_flags == nil then ImGuiTableFlags_flags = 0 end
  if ImVec2_outer_size == nil then ImVec2_outer_size = M.ImVec2(0.0,0.0) end
  if float_inner_width == nil then float_inner_width = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'BeginTable' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginTable(string_str_id, int_column, ImGuiTableFlags_flags, ImVec2_outer_size, float_inner_width)
end
function M.EndTable() imgui.EndTable() end
function M.TableNextRow(ImGuiTableRowFlags_row_flags, float_min_row_height)
  if ImGuiTableRowFlags_row_flags == nil then ImGuiTableRowFlags_row_flags = 0 end
  if float_min_row_height == nil then float_min_row_height = 0 end
  imgui.TableNextRow(ImGuiTableRowFlags_row_flags, float_min_row_height)
end
function M.TableNextColumn() return imgui.TableNextColumn() end
function M.TableSetColumnIndex(int_column_n) return imgui.TableSetColumnIndex(int_column_n) end
function M.TableSetupColumn(string_label, ImGuiTableColumnFlags_flags, float_init_width_or_weight, ImGuiID_user_id)
  if ImGuiTableColumnFlags_flags == nil then ImGuiTableColumnFlags_flags = 0 end
  if float_init_width_or_weight == nil then float_init_width_or_weight = 0 end
  if ImGuiID_user_id == nil then ImGuiID_user_id = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'TableSetupColumn' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.TableSetupColumn(string_label, ImGuiTableColumnFlags_flags, float_init_width_or_weight, ImGuiID_user_id)
end
function M.TableSetupScrollFreeze(int_cols, int_rows) imgui.TableSetupScrollFreeze(int_cols, int_rows) end
function M.TableHeadersRow() imgui.TableHeadersRow() end
function M.TableHeader(string_label)
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'TableHeader' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.TableHeader(string_label)
end
function M.TableGetSortSpecs() return imgui.TableGetSortSpecs() end
function M.TableGetColumnCount() return imgui.TableGetColumnCount() end
function M.TableGetColumnIndex() return imgui.TableGetColumnIndex() end
function M.TableGetRowIndex() return imgui.TableGetRowIndex() end
function M.TableGetColumnName(int_column_n)
  if int_column_n == nil then int_column_n = -1 end
  return imgui.TableGetColumnName(int_column_n)
end
function M.TableGetColumnFlags(int_column_n)
  if int_column_n == nil then int_column_n = -1 end
  return imgui.TableGetColumnFlags(int_column_n)
end
function M.TableSetColumnEnabled(int_column_n, bool_v) imgui.TableSetColumnEnabled(int_column_n, bool_v) end
function M.TableSetBgColor(ImGuiTableBgTarget_target, ImU32_color, int_column_n)
  if int_column_n == nil then int_column_n = -1 end
  imgui.TableSetBgColor(ImGuiTableBgTarget_target, ImU32_color, int_column_n)
end
function M.Columns(int_count, string_id, bool_border)
  if int_count == nil then int_count = 1 end
  -- string_id is optional and can be nil
  if bool_border == nil then bool_border = true end
  imgui.Columns(int_count, string_id, bool_border)
end
function M.NextColumn() imgui.NextColumn() end
function M.GetColumnIndex() return imgui.GetColumnIndex() end
function M.GetColumnWidth(int_column_index)
  if int_column_index == nil then int_column_index = -1 end
  return imgui.GetColumnWidth(int_column_index)
end
function M.SetColumnWidth(int_column_index, float_width) imgui.SetColumnWidth(int_column_index, float_width) end
function M.GetColumnOffset(int_column_index)
  if int_column_index == nil then int_column_index = -1 end
  return imgui.GetColumnOffset(int_column_index)
end
function M.SetColumnOffset(int_column_index, float_offset_x) imgui.SetColumnOffset(int_column_index, float_offset_x) end
function M.GetColumnsCount() return imgui.GetColumnsCount() end
function M.BeginTabBar(string_str_id, ImGuiTabBarFlags_flags)
  if ImGuiTabBarFlags_flags == nil then ImGuiTabBarFlags_flags = 0 end
  if string_str_id == nil then log("E", "", "Parameter 'string_str_id' of function 'BeginTabBar' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginTabBar(string_str_id, ImGuiTabBarFlags_flags)
end
function M.EndTabBar() imgui.EndTabBar() end
function M.BeginTabItem(string_label, bool_p_open, ImGuiTabItemFlags_flags)
  -- bool_p_open is optional and can be nil
  if ImGuiTabItemFlags_flags == nil then ImGuiTabItemFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'BeginTabItem' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.BeginTabItem(string_label, bool_p_open, ImGuiTabItemFlags_flags)
end
function M.EndTabItem() imgui.EndTabItem() end
function M.TabItemButton(string_label, ImGuiTabItemFlags_flags)
  if ImGuiTabItemFlags_flags == nil then ImGuiTabItemFlags_flags = 0 end
  if string_label == nil then log("E", "", "Parameter 'string_label' of function 'TabItemButton' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.TabItemButton(string_label, ImGuiTabItemFlags_flags)
end
function M.SetTabItemClosed(string_tab_or_docked_window_label)
  if string_tab_or_docked_window_label == nil then log("E", "", "Parameter 'string_tab_or_docked_window_label' of function 'SetTabItemClosed' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SetTabItemClosed(string_tab_or_docked_window_label)
end
function M.DockSpace(ImGuiID_id, ImVec2_size, ImGuiDockNodeFlags_flags, ImGuiWindowClass_window_class)
  if ImVec2_size == nil then ImVec2_size = M.ImVec2(0,0) end
  if ImGuiDockNodeFlags_flags == nil then ImGuiDockNodeFlags_flags = 0 end
  -- ImGuiWindowClass_window_class is optional and can be nil
  return imgui.DockSpace(ImGuiID_id, ImVec2_size, ImGuiDockNodeFlags_flags, ImGuiWindowClass_window_class)
end
function M.DockSpaceOverViewport(ImGuiViewport_viewport, ImGuiDockNodeFlags_flags, ImGuiWindowClass_window_class)
  -- ImGuiViewport_viewport is optional and can be nil
  if ImGuiDockNodeFlags_flags == nil then ImGuiDockNodeFlags_flags = 0 end
  -- ImGuiWindowClass_window_class is optional and can be nil
  return imgui.DockSpaceOverViewport(ImGuiViewport_viewport, ImGuiDockNodeFlags_flags, ImGuiWindowClass_window_class)
end
function M.SetNextWindowDockID(ImGuiID_dock_id, ImGuiCond_cond)
  if ImGuiCond_cond == nil then ImGuiCond_cond = 0 end
  imgui.SetNextWindowDockID(ImGuiID_dock_id, ImGuiCond_cond)
end
function M.SetNextWindowClass(ImGuiWindowClass_window_class)
  if ImGuiWindowClass_window_class == nil then log("E", "", "Parameter 'ImGuiWindowClass_window_class' of function 'SetNextWindowClass' cannot be nil, as the c type is 'const ImGuiWindowClass *'") ; return end
  imgui.SetNextWindowClass(ImGuiWindowClass_window_class)
end
function M.GetWindowDockID() return imgui.GetWindowDockID() end
function M.IsWindowDocked() return imgui.IsWindowDocked() end
function M.LogToTTY(int_auto_open_depth)
  if int_auto_open_depth == nil then int_auto_open_depth = -1 end
  imgui.LogToTTY(int_auto_open_depth)
end
function M.LogToClipboard(int_auto_open_depth)
  if int_auto_open_depth == nil then int_auto_open_depth = -1 end
  imgui.LogToClipboard(int_auto_open_depth)
end
function M.LogFinish() imgui.LogFinish() end
function M.LogButtons() imgui.LogButtons() end
function M.BeginDragDropSource(ImGuiDragDropFlags_flags)
  if ImGuiDragDropFlags_flags == nil then ImGuiDragDropFlags_flags = 0 end
  return imgui.BeginDragDropSource(ImGuiDragDropFlags_flags)
end
function M.EndDragDropSource() imgui.EndDragDropSource() end
function M.BeginDragDropTarget() return imgui.BeginDragDropTarget() end
function M.AcceptDragDropPayload(string_type, ImGuiDragDropFlags_flags)
  if ImGuiDragDropFlags_flags == nil then ImGuiDragDropFlags_flags = 0 end
  if string_type == nil then log("E", "", "Parameter 'string_type' of function 'AcceptDragDropPayload' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.AcceptDragDropPayload(string_type, ImGuiDragDropFlags_flags)
end
function M.EndDragDropTarget() imgui.EndDragDropTarget() end
function M.GetDragDropPayload() return imgui.GetDragDropPayload() end
function M.BeginDisabled(bool_disabled)
  if bool_disabled == nil then bool_disabled = true end
  imgui.BeginDisabled(bool_disabled)
end
function M.EndDisabled() imgui.EndDisabled() end
function M.PushClipRect(ImVec2_clip_rect_min, ImVec2_clip_rect_max, bool_intersect_with_current_clip_rect) imgui.PushClipRect(ImVec2_clip_rect_min, ImVec2_clip_rect_max, bool_intersect_with_current_clip_rect) end
function M.PopClipRect() imgui.PopClipRect() end
function M.SetItemDefaultFocus() imgui.SetItemDefaultFocus() end
function M.SetKeyboardFocusHere(int_offset)
  if int_offset == nil then int_offset = 0 end
  imgui.SetKeyboardFocusHere(int_offset)
end
function M.SetNextItemAllowOverlap() imgui.SetNextItemAllowOverlap() end
function M.IsItemHovered(ImGuiHoveredFlags_flags)
  if ImGuiHoveredFlags_flags == nil then ImGuiHoveredFlags_flags = 0 end
  return imgui.IsItemHovered(ImGuiHoveredFlags_flags)
end
function M.IsItemActive() return imgui.IsItemActive() end
function M.IsItemFocused() return imgui.IsItemFocused() end
function M.IsItemClicked(ImGuiMouseButton_mouse_button)
  if ImGuiMouseButton_mouse_button == nil then ImGuiMouseButton_mouse_button = 0 end
  return imgui.IsItemClicked(ImGuiMouseButton_mouse_button)
end
function M.IsItemVisible() return imgui.IsItemVisible() end
function M.IsItemEdited() return imgui.IsItemEdited() end
function M.IsItemActivated() return imgui.IsItemActivated() end
function M.IsItemDeactivated() return imgui.IsItemDeactivated() end
function M.IsItemDeactivatedAfterEdit() return imgui.IsItemDeactivatedAfterEdit() end
function M.IsItemToggledOpen() return imgui.IsItemToggledOpen() end
function M.IsAnyItemHovered() return imgui.IsAnyItemHovered() end
function M.IsAnyItemActive() return imgui.IsAnyItemActive() end
function M.IsAnyItemFocused() return imgui.IsAnyItemFocused() end
function M.GetItemID() return imgui.GetItemID() end
function M.GetItemRectMin() return imgui.GetItemRectMin() end
function M.GetItemRectMax() return imgui.GetItemRectMax() end
function M.GetItemRectSize() return imgui.GetItemRectSize() end
function M.GetMainViewport() return imgui.GetMainViewport() end
function M.GetBackgroundDrawList1() return imgui.GetBackgroundDrawList1() end
function M.GetForegroundDrawList1() return imgui.GetForegroundDrawList1() end
function M.GetBackgroundDrawList2(ImGuiViewport_viewport)
  if ImGuiViewport_viewport == nil then log("E", "", "Parameter 'ImGuiViewport_viewport' of function 'GetBackgroundDrawList2' cannot be nil, as the c type is 'ImGuiViewport *'") ; return end
  return imgui.GetBackgroundDrawList2(ImGuiViewport_viewport)
end
function M.GetForegroundDrawList2(ImGuiViewport_viewport)
  if ImGuiViewport_viewport == nil then log("E", "", "Parameter 'ImGuiViewport_viewport' of function 'GetForegroundDrawList2' cannot be nil, as the c type is 'ImGuiViewport *'") ; return end
  return imgui.GetForegroundDrawList2(ImGuiViewport_viewport)
end
function M.IsRectVisible1(ImVec2_size) return imgui.IsRectVisible1(ImVec2_size) end
function M.IsRectVisible2(ImVec2_rect_min, ImVec2_rect_max) return imgui.IsRectVisible2(ImVec2_rect_min, ImVec2_rect_max) end
function M.GetTime() return imgui.GetTime() end
function M.GetFrameCount() return imgui.GetFrameCount() end
function M.GetDrawListSharedData() return imgui.GetDrawListSharedData() end
function M.GetStyleColorName(ImGuiCol_idx) return imgui.GetStyleColorName(ImGuiCol_idx) end
function M.SetStateStorage(ImGuiStorage_storage)
  if ImGuiStorage_storage == nil then log("E", "", "Parameter 'ImGuiStorage_storage' of function 'SetStateStorage' cannot be nil, as the c type is 'ImGuiStorage *'") ; return end
  imgui.SetStateStorage(ImGuiStorage_storage)
end
function M.GetStateStorage() return imgui.GetStateStorage() end
function M.BeginChildFrame(ImGuiID_id, ImVec2_size, ImGuiWindowFlags_flags)
  if ImGuiWindowFlags_flags == nil then ImGuiWindowFlags_flags = 0 end
  return imgui.BeginChildFrame(ImGuiID_id, ImVec2_size, ImGuiWindowFlags_flags)
end
function M.EndChildFrame() imgui.EndChildFrame() end
function M.CalcTextSize(string_text, string_text_end, bool_hide_text_after_double_hash, float_wrap_width)
  -- string_text_end is optional and can be nil
  if bool_hide_text_after_double_hash == nil then bool_hide_text_after_double_hash = false end
  if float_wrap_width == nil then float_wrap_width = -1 end
  if string_text == nil then log("E", "", "Parameter 'string_text' of function 'CalcTextSize' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.CalcTextSize(string_text, string_text_end, bool_hide_text_after_double_hash, float_wrap_width)
end
function M.ColorConvertU32ToFloat4(_in) return imgui.ColorConvertU32ToFloat4(_in) end
function M.ColorConvertFloat4ToU32(_in) return imgui.ColorConvertFloat4ToU32(_in) end
function M.ColorConvertRGBtoHSV(float_r, float_g, float_b, float_out_h, float_out_s, float_out_v) imgui.ColorConvertRGBtoHSV(float_r, float_g, float_b, float_out_h, float_out_s, float_out_v) end
function M.ColorConvertHSVtoRGB(float_h, float_s, float_v, float_out_r, float_out_g, float_out_b) imgui.ColorConvertHSVtoRGB(float_h, float_s, float_v, float_out_r, float_out_g, float_out_b) end
function M.IsKeyDown(ImGuiKey_key) return imgui.IsKeyDown(ImGuiKey_key) end
function M.IsKeyPressed(ImGuiKey_key, _repeat)
  if _repeat == nil then _repeat = true end
  return imgui.IsKeyPressed(ImGuiKey_key, _repeat)
end
function M.IsKeyReleased(ImGuiKey_key) return imgui.IsKeyReleased(ImGuiKey_key) end
function M.GetKeyPressedAmount(ImGuiKey_key, float_repeat_delay, float_rate) return imgui.GetKeyPressedAmount(ImGuiKey_key, float_repeat_delay, float_rate) end
function M.GetKeyName(ImGuiKey_key) return imgui.GetKeyName(ImGuiKey_key) end
function M.SetNextFrameWantCaptureKeyboard(bool_want_capture_keyboard) imgui.SetNextFrameWantCaptureKeyboard(bool_want_capture_keyboard) end
function M.IsMouseDown(ImGuiMouseButton_button) return imgui.IsMouseDown(ImGuiMouseButton_button) end
function M.IsMouseClicked(ImGuiMouseButton_button, _repeat)
  if _repeat == nil then _repeat = false end
  return imgui.IsMouseClicked(ImGuiMouseButton_button, _repeat)
end
function M.IsMouseReleased(ImGuiMouseButton_button) return imgui.IsMouseReleased(ImGuiMouseButton_button) end
function M.IsMouseDoubleClicked(ImGuiMouseButton_button) return imgui.IsMouseDoubleClicked(ImGuiMouseButton_button) end
function M.GetMouseClickedCount(ImGuiMouseButton_button) return imgui.GetMouseClickedCount(ImGuiMouseButton_button) end
function M.IsMouseHoveringRect(ImVec2_r_min, ImVec2_r_max, bool_clip)
  if bool_clip == nil then bool_clip = true end
  return imgui.IsMouseHoveringRect(ImVec2_r_min, ImVec2_r_max, bool_clip)
end
function M.IsMousePosValid(ImVec2_mouse_pos)
  -- ImVec2_mouse_pos is optional and can be nil
  return imgui.IsMousePosValid(ImVec2_mouse_pos)
end
function M.IsAnyMouseDown() return imgui.IsAnyMouseDown() end
function M.GetMousePos() return imgui.GetMousePos() end
function M.GetMousePosOnOpeningCurrentPopup() return imgui.GetMousePosOnOpeningCurrentPopup() end
function M.IsMouseDragging(ImGuiMouseButton_button, float_lock_threshold)
  if float_lock_threshold == nil then float_lock_threshold = -1 end
  return imgui.IsMouseDragging(ImGuiMouseButton_button, float_lock_threshold)
end
function M.GetMouseDragDelta(ImGuiMouseButton_button, float_lock_threshold)
  if ImGuiMouseButton_button == nil then ImGuiMouseButton_button = 0 end
  if float_lock_threshold == nil then float_lock_threshold = -1 end
  return imgui.GetMouseDragDelta(ImGuiMouseButton_button, float_lock_threshold)
end
function M.ResetMouseDragDelta(ImGuiMouseButton_button)
  if ImGuiMouseButton_button == nil then ImGuiMouseButton_button = 0 end
  imgui.ResetMouseDragDelta(ImGuiMouseButton_button)
end
function M.GetMouseCursor() return imgui.GetMouseCursor() end
function M.SetMouseCursor(ImGuiMouseCursor_cursor_type) imgui.SetMouseCursor(ImGuiMouseCursor_cursor_type) end
function M.SetNextFrameWantCaptureMouse(bool_want_capture_mouse) imgui.SetNextFrameWantCaptureMouse(bool_want_capture_mouse) end
function M.GetClipboardText() return imgui.GetClipboardText() end
function M.SetClipboardText(string_text)
  if string_text == nil then log("E", "", "Parameter 'string_text' of function 'SetClipboardText' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.SetClipboardText(string_text)
end
function M.DebugTextEncoding(string_text)
  if string_text == nil then log("E", "", "Parameter 'string_text' of function 'DebugTextEncoding' cannot be nil, as the c type is 'const char *'") ; return end
  imgui.DebugTextEncoding(string_text)
end
function M.DebugCheckVersionAndDataLayout(string_version_str, size_t_sz_io, size_t_sz_style, size_t_sz_vec2, size_t_sz_vec4, size_t_sz_drawvert, size_t_sz_drawidx)
  if string_version_str == nil then log("E", "", "Parameter 'string_version_str' of function 'DebugCheckVersionAndDataLayout' cannot be nil, as the c type is 'const char *'") ; return end
  return imgui.DebugCheckVersionAndDataLayout(string_version_str, size_t_sz_io, size_t_sz_style, size_t_sz_vec2, size_t_sz_vec4, size_t_sz_drawvert, size_t_sz_drawidx)
end
function M.GetPlatformIO() return imgui.GetPlatformIO() end
function M.UpdatePlatformWindows() imgui.UpdatePlatformWindows() end
function M.RenderPlatformWindowsDefault(void_platform_render_arg, void_renderer_render_arg)
  -- void_platform_render_arg is optional and can be nil
  -- void_renderer_render_arg is optional and can be nil
  imgui.RenderPlatformWindowsDefault(void_platform_render_arg, void_renderer_render_arg)
end
function M.DestroyPlatformWindows() imgui.DestroyPlatformWindows() end
function M.FindViewportByID(ImGuiID_id) return imgui.FindViewportByID(ImGuiID_id) end
function M.FindViewportByPlatformHandle(void_platform_handle)
  if void_platform_handle == nil then log("E", "", "Parameter 'void_platform_handle' of function 'FindViewportByPlatformHandle' cannot be nil, as the c type is 'void *'") ; return end
  return imgui.FindViewportByPlatformHandle(void_platform_handle)
end
--=== enum ImGuiWindowFlags_ ===
M.WindowFlags_None = imgui.enum.ImGuiWindowFlags_None
M.WindowFlags_NoTitleBar = imgui.enum.ImGuiWindowFlags_NoTitleBar
M.WindowFlags_NoResize = imgui.enum.ImGuiWindowFlags_NoResize
M.WindowFlags_NoMove = imgui.enum.ImGuiWindowFlags_NoMove
M.WindowFlags_NoScrollbar = imgui.enum.ImGuiWindowFlags_NoScrollbar
M.WindowFlags_NoScrollWithMouse = imgui.enum.ImGuiWindowFlags_NoScrollWithMouse
M.WindowFlags_NoCollapse = imgui.enum.ImGuiWindowFlags_NoCollapse
M.WindowFlags_AlwaysAutoResize = imgui.enum.ImGuiWindowFlags_AlwaysAutoResize
M.WindowFlags_NoBackground = imgui.enum.ImGuiWindowFlags_NoBackground
M.WindowFlags_NoSavedSettings = imgui.enum.ImGuiWindowFlags_NoSavedSettings
M.WindowFlags_NoMouseInputs = imgui.enum.ImGuiWindowFlags_NoMouseInputs
M.WindowFlags_MenuBar = imgui.enum.ImGuiWindowFlags_MenuBar
M.WindowFlags_HorizontalScrollbar = imgui.enum.ImGuiWindowFlags_HorizontalScrollbar
M.WindowFlags_NoFocusOnAppearing = imgui.enum.ImGuiWindowFlags_NoFocusOnAppearing
M.WindowFlags_NoBringToFrontOnFocus = imgui.enum.ImGuiWindowFlags_NoBringToFrontOnFocus
M.WindowFlags_AlwaysVerticalScrollbar = imgui.enum.ImGuiWindowFlags_AlwaysVerticalScrollbar
M.WindowFlags_AlwaysHorizontalScrollbar = imgui.enum.ImGuiWindowFlags_AlwaysHorizontalScrollbar
M.WindowFlags_AlwaysUseWindowPadding = imgui.enum.ImGuiWindowFlags_AlwaysUseWindowPadding
M.WindowFlags_NoNavInputs = imgui.enum.ImGuiWindowFlags_NoNavInputs
M.WindowFlags_NoNavFocus = imgui.enum.ImGuiWindowFlags_NoNavFocus
M.WindowFlags_UnsavedDocument = imgui.enum.ImGuiWindowFlags_UnsavedDocument
M.WindowFlags_NoDocking = imgui.enum.ImGuiWindowFlags_NoDocking
M.WindowFlags_NoNav = imgui.enum.ImGuiWindowFlags_NoNav
M.WindowFlags_NoDecoration = imgui.enum.ImGuiWindowFlags_NoDecoration
M.WindowFlags_NoInputs = imgui.enum.ImGuiWindowFlags_NoInputs
M.WindowFlags_NavFlattened = imgui.enum.ImGuiWindowFlags_NavFlattened
M.WindowFlags_ChildWindow = imgui.enum.ImGuiWindowFlags_ChildWindow
M.WindowFlags_Tooltip = imgui.enum.ImGuiWindowFlags_Tooltip
M.WindowFlags_Popup = imgui.enum.ImGuiWindowFlags_Popup
M.WindowFlags_Modal = imgui.enum.ImGuiWindowFlags_Modal
M.WindowFlags_ChildMenu = imgui.enum.ImGuiWindowFlags_ChildMenu
M.WindowFlags_DockNodeHost = imgui.enum.ImGuiWindowFlags_DockNodeHost
--===
--=== enum ImGuiInputTextFlags_ ===
M.InputTextFlags_None = imgui.enum.ImGuiInputTextFlags_None
M.InputTextFlags_CharsDecimal = imgui.enum.ImGuiInputTextFlags_CharsDecimal
M.InputTextFlags_CharsHexadecimal = imgui.enum.ImGuiInputTextFlags_CharsHexadecimal
M.InputTextFlags_CharsUppercase = imgui.enum.ImGuiInputTextFlags_CharsUppercase
M.InputTextFlags_CharsNoBlank = imgui.enum.ImGuiInputTextFlags_CharsNoBlank
M.InputTextFlags_AutoSelectAll = imgui.enum.ImGuiInputTextFlags_AutoSelectAll
M.InputTextFlags_EnterReturnsTrue = imgui.enum.ImGuiInputTextFlags_EnterReturnsTrue
M.InputTextFlags_CallbackCompletion = imgui.enum.ImGuiInputTextFlags_CallbackCompletion
M.InputTextFlags_CallbackHistory = imgui.enum.ImGuiInputTextFlags_CallbackHistory
M.InputTextFlags_CallbackAlways = imgui.enum.ImGuiInputTextFlags_CallbackAlways
M.InputTextFlags_CallbackCharFilter = imgui.enum.ImGuiInputTextFlags_CallbackCharFilter
M.InputTextFlags_AllowTabInput = imgui.enum.ImGuiInputTextFlags_AllowTabInput
M.InputTextFlags_CtrlEnterForNewLine = imgui.enum.ImGuiInputTextFlags_CtrlEnterForNewLine
M.InputTextFlags_NoHorizontalScroll = imgui.enum.ImGuiInputTextFlags_NoHorizontalScroll
M.InputTextFlags_AlwaysOverwrite = imgui.enum.ImGuiInputTextFlags_AlwaysOverwrite
M.InputTextFlags_ReadOnly = imgui.enum.ImGuiInputTextFlags_ReadOnly
M.InputTextFlags_Password = imgui.enum.ImGuiInputTextFlags_Password
M.InputTextFlags_NoUndoRedo = imgui.enum.ImGuiInputTextFlags_NoUndoRedo
M.InputTextFlags_CharsScientific = imgui.enum.ImGuiInputTextFlags_CharsScientific
M.InputTextFlags_CallbackResize = imgui.enum.ImGuiInputTextFlags_CallbackResize
M.InputTextFlags_CallbackEdit = imgui.enum.ImGuiInputTextFlags_CallbackEdit
M.InputTextFlags_EscapeClearsAll = imgui.enum.ImGuiInputTextFlags_EscapeClearsAll
--===
--=== enum ImGuiTreeNodeFlags_ ===
M.TreeNodeFlags_None = imgui.enum.ImGuiTreeNodeFlags_None
M.TreeNodeFlags_Selected = imgui.enum.ImGuiTreeNodeFlags_Selected
M.TreeNodeFlags_Framed = imgui.enum.ImGuiTreeNodeFlags_Framed
M.TreeNodeFlags_AllowOverlap = imgui.enum.ImGuiTreeNodeFlags_AllowOverlap
M.TreeNodeFlags_NoTreePushOnOpen = imgui.enum.ImGuiTreeNodeFlags_NoTreePushOnOpen
M.TreeNodeFlags_NoAutoOpenOnLog = imgui.enum.ImGuiTreeNodeFlags_NoAutoOpenOnLog
M.TreeNodeFlags_DefaultOpen = imgui.enum.ImGuiTreeNodeFlags_DefaultOpen
M.TreeNodeFlags_OpenOnDoubleClick = imgui.enum.ImGuiTreeNodeFlags_OpenOnDoubleClick
M.TreeNodeFlags_OpenOnArrow = imgui.enum.ImGuiTreeNodeFlags_OpenOnArrow
M.TreeNodeFlags_Leaf = imgui.enum.ImGuiTreeNodeFlags_Leaf
M.TreeNodeFlags_Bullet = imgui.enum.ImGuiTreeNodeFlags_Bullet
M.TreeNodeFlags_FramePadding = imgui.enum.ImGuiTreeNodeFlags_FramePadding
M.TreeNodeFlags_SpanAvailWidth = imgui.enum.ImGuiTreeNodeFlags_SpanAvailWidth
M.TreeNodeFlags_SpanFullWidth = imgui.enum.ImGuiTreeNodeFlags_SpanFullWidth
M.TreeNodeFlags_NavLeftJumpsBackHere = imgui.enum.ImGuiTreeNodeFlags_NavLeftJumpsBackHere
M.TreeNodeFlags_CollapsingHeader = imgui.enum.ImGuiTreeNodeFlags_CollapsingHeader
--===
--=== enum ImGuiPopupFlags_ ===
M.PopupFlags_None = imgui.enum.ImGuiPopupFlags_None
M.PopupFlags_MouseButtonLeft = imgui.enum.ImGuiPopupFlags_MouseButtonLeft
M.PopupFlags_MouseButtonRight = imgui.enum.ImGuiPopupFlags_MouseButtonRight
M.PopupFlags_MouseButtonMiddle = imgui.enum.ImGuiPopupFlags_MouseButtonMiddle
M.PopupFlags_MouseButtonMask_ = imgui.enum.ImGuiPopupFlags_MouseButtonMask_
M.PopupFlags_MouseButtonDefault_ = imgui.enum.ImGuiPopupFlags_MouseButtonDefault_
M.PopupFlags_NoOpenOverExistingPopup = imgui.enum.ImGuiPopupFlags_NoOpenOverExistingPopup
M.PopupFlags_NoOpenOverItems = imgui.enum.ImGuiPopupFlags_NoOpenOverItems
M.PopupFlags_AnyPopupId = imgui.enum.ImGuiPopupFlags_AnyPopupId
M.PopupFlags_AnyPopupLevel = imgui.enum.ImGuiPopupFlags_AnyPopupLevel
M.PopupFlags_AnyPopup = imgui.enum.ImGuiPopupFlags_AnyPopup
--===
--=== enum ImGuiSelectableFlags_ ===
M.SelectableFlags_None = imgui.enum.ImGuiSelectableFlags_None
M.SelectableFlags_DontClosePopups = imgui.enum.ImGuiSelectableFlags_DontClosePopups
M.SelectableFlags_SpanAllColumns = imgui.enum.ImGuiSelectableFlags_SpanAllColumns
M.SelectableFlags_AllowDoubleClick = imgui.enum.ImGuiSelectableFlags_AllowDoubleClick
M.SelectableFlags_Disabled = imgui.enum.ImGuiSelectableFlags_Disabled
M.SelectableFlags_AllowOverlap = imgui.enum.ImGuiSelectableFlags_AllowOverlap
--===
--=== enum ImGuiComboFlags_ ===
M.ComboFlags_None = imgui.enum.ImGuiComboFlags_None
M.ComboFlags_PopupAlignLeft = imgui.enum.ImGuiComboFlags_PopupAlignLeft
M.ComboFlags_HeightSmall = imgui.enum.ImGuiComboFlags_HeightSmall
M.ComboFlags_HeightRegular = imgui.enum.ImGuiComboFlags_HeightRegular
M.ComboFlags_HeightLarge = imgui.enum.ImGuiComboFlags_HeightLarge
M.ComboFlags_HeightLargest = imgui.enum.ImGuiComboFlags_HeightLargest
M.ComboFlags_NoArrowButton = imgui.enum.ImGuiComboFlags_NoArrowButton
M.ComboFlags_NoPreview = imgui.enum.ImGuiComboFlags_NoPreview
M.ComboFlags_HeightMask_ = imgui.enum.ImGuiComboFlags_HeightMask_
--===
--=== enum ImGuiTabBarFlags_ ===
M.TabBarFlags_None = imgui.enum.ImGuiTabBarFlags_None
M.TabBarFlags_Reorderable = imgui.enum.ImGuiTabBarFlags_Reorderable
M.TabBarFlags_AutoSelectNewTabs = imgui.enum.ImGuiTabBarFlags_AutoSelectNewTabs
M.TabBarFlags_TabListPopupButton = imgui.enum.ImGuiTabBarFlags_TabListPopupButton
M.TabBarFlags_NoCloseWithMiddleMouseButton = imgui.enum.ImGuiTabBarFlags_NoCloseWithMiddleMouseButton
M.TabBarFlags_NoTabListScrollingButtons = imgui.enum.ImGuiTabBarFlags_NoTabListScrollingButtons
M.TabBarFlags_NoTooltip = imgui.enum.ImGuiTabBarFlags_NoTooltip
M.TabBarFlags_FittingPolicyResizeDown = imgui.enum.ImGuiTabBarFlags_FittingPolicyResizeDown
M.TabBarFlags_FittingPolicyScroll = imgui.enum.ImGuiTabBarFlags_FittingPolicyScroll
M.TabBarFlags_FittingPolicyMask_ = imgui.enum.ImGuiTabBarFlags_FittingPolicyMask_
M.TabBarFlags_FittingPolicyDefault_ = imgui.enum.ImGuiTabBarFlags_FittingPolicyDefault_
--===
--=== enum ImGuiTabItemFlags_ ===
M.TabItemFlags_None = imgui.enum.ImGuiTabItemFlags_None
M.TabItemFlags_UnsavedDocument = imgui.enum.ImGuiTabItemFlags_UnsavedDocument
M.TabItemFlags_SetSelected = imgui.enum.ImGuiTabItemFlags_SetSelected
M.TabItemFlags_NoCloseWithMiddleMouseButton = imgui.enum.ImGuiTabItemFlags_NoCloseWithMiddleMouseButton
M.TabItemFlags_NoPushId = imgui.enum.ImGuiTabItemFlags_NoPushId
M.TabItemFlags_NoTooltip = imgui.enum.ImGuiTabItemFlags_NoTooltip
M.TabItemFlags_NoReorder = imgui.enum.ImGuiTabItemFlags_NoReorder
M.TabItemFlags_Leading = imgui.enum.ImGuiTabItemFlags_Leading
M.TabItemFlags_Trailing = imgui.enum.ImGuiTabItemFlags_Trailing
--===
--=== enum ImGuiTableFlags_ ===
M.TableFlags_None = imgui.enum.ImGuiTableFlags_None
M.TableFlags_Resizable = imgui.enum.ImGuiTableFlags_Resizable
M.TableFlags_Reorderable = imgui.enum.ImGuiTableFlags_Reorderable
M.TableFlags_Hideable = imgui.enum.ImGuiTableFlags_Hideable
M.TableFlags_Sortable = imgui.enum.ImGuiTableFlags_Sortable
M.TableFlags_NoSavedSettings = imgui.enum.ImGuiTableFlags_NoSavedSettings
M.TableFlags_ContextMenuInBody = imgui.enum.ImGuiTableFlags_ContextMenuInBody
M.TableFlags_RowBg = imgui.enum.ImGuiTableFlags_RowBg
M.TableFlags_BordersInnerH = imgui.enum.ImGuiTableFlags_BordersInnerH
M.TableFlags_BordersOuterH = imgui.enum.ImGuiTableFlags_BordersOuterH
M.TableFlags_BordersInnerV = imgui.enum.ImGuiTableFlags_BordersInnerV
M.TableFlags_BordersOuterV = imgui.enum.ImGuiTableFlags_BordersOuterV
M.TableFlags_BordersH = imgui.enum.ImGuiTableFlags_BordersH
M.TableFlags_BordersV = imgui.enum.ImGuiTableFlags_BordersV
M.TableFlags_BordersInner = imgui.enum.ImGuiTableFlags_BordersInner
M.TableFlags_BordersOuter = imgui.enum.ImGuiTableFlags_BordersOuter
M.TableFlags_Borders = imgui.enum.ImGuiTableFlags_Borders
M.TableFlags_NoBordersInBody = imgui.enum.ImGuiTableFlags_NoBordersInBody
M.TableFlags_NoBordersInBodyUntilResize = imgui.enum.ImGuiTableFlags_NoBordersInBodyUntilResize
M.TableFlags_SizingFixedFit = imgui.enum.ImGuiTableFlags_SizingFixedFit
M.TableFlags_SizingFixedSame = imgui.enum.ImGuiTableFlags_SizingFixedSame
M.TableFlags_SizingStretchProp = imgui.enum.ImGuiTableFlags_SizingStretchProp
M.TableFlags_SizingStretchSame = imgui.enum.ImGuiTableFlags_SizingStretchSame
M.TableFlags_NoHostExtendX = imgui.enum.ImGuiTableFlags_NoHostExtendX
M.TableFlags_NoHostExtendY = imgui.enum.ImGuiTableFlags_NoHostExtendY
M.TableFlags_NoKeepColumnsVisible = imgui.enum.ImGuiTableFlags_NoKeepColumnsVisible
M.TableFlags_PreciseWidths = imgui.enum.ImGuiTableFlags_PreciseWidths
M.TableFlags_NoClip = imgui.enum.ImGuiTableFlags_NoClip
M.TableFlags_PadOuterX = imgui.enum.ImGuiTableFlags_PadOuterX
M.TableFlags_NoPadOuterX = imgui.enum.ImGuiTableFlags_NoPadOuterX
M.TableFlags_NoPadInnerX = imgui.enum.ImGuiTableFlags_NoPadInnerX
M.TableFlags_ScrollX = imgui.enum.ImGuiTableFlags_ScrollX
M.TableFlags_ScrollY = imgui.enum.ImGuiTableFlags_ScrollY
M.TableFlags_SortMulti = imgui.enum.ImGuiTableFlags_SortMulti
M.TableFlags_SortTristate = imgui.enum.ImGuiTableFlags_SortTristate
M.TableFlags_SizingMask_ = imgui.enum.ImGuiTableFlags_SizingMask_
--===
--=== enum ImGuiTableColumnFlags_ ===
M.TableColumnFlags_None = imgui.enum.ImGuiTableColumnFlags_None
M.TableColumnFlags_Disabled = imgui.enum.ImGuiTableColumnFlags_Disabled
M.TableColumnFlags_DefaultHide = imgui.enum.ImGuiTableColumnFlags_DefaultHide
M.TableColumnFlags_DefaultSort = imgui.enum.ImGuiTableColumnFlags_DefaultSort
M.TableColumnFlags_WidthStretch = imgui.enum.ImGuiTableColumnFlags_WidthStretch
M.TableColumnFlags_WidthFixed = imgui.enum.ImGuiTableColumnFlags_WidthFixed
M.TableColumnFlags_NoResize = imgui.enum.ImGuiTableColumnFlags_NoResize
M.TableColumnFlags_NoReorder = imgui.enum.ImGuiTableColumnFlags_NoReorder
M.TableColumnFlags_NoHide = imgui.enum.ImGuiTableColumnFlags_NoHide
M.TableColumnFlags_NoClip = imgui.enum.ImGuiTableColumnFlags_NoClip
M.TableColumnFlags_NoSort = imgui.enum.ImGuiTableColumnFlags_NoSort
M.TableColumnFlags_NoSortAscending = imgui.enum.ImGuiTableColumnFlags_NoSortAscending
M.TableColumnFlags_NoSortDescending = imgui.enum.ImGuiTableColumnFlags_NoSortDescending
M.TableColumnFlags_NoHeaderLabel = imgui.enum.ImGuiTableColumnFlags_NoHeaderLabel
M.TableColumnFlags_NoHeaderWidth = imgui.enum.ImGuiTableColumnFlags_NoHeaderWidth
M.TableColumnFlags_PreferSortAscending = imgui.enum.ImGuiTableColumnFlags_PreferSortAscending
M.TableColumnFlags_PreferSortDescending = imgui.enum.ImGuiTableColumnFlags_PreferSortDescending
M.TableColumnFlags_IndentEnable = imgui.enum.ImGuiTableColumnFlags_IndentEnable
M.TableColumnFlags_IndentDisable = imgui.enum.ImGuiTableColumnFlags_IndentDisable
M.TableColumnFlags_IsEnabled = imgui.enum.ImGuiTableColumnFlags_IsEnabled
M.TableColumnFlags_IsVisible = imgui.enum.ImGuiTableColumnFlags_IsVisible
M.TableColumnFlags_IsSorted = imgui.enum.ImGuiTableColumnFlags_IsSorted
M.TableColumnFlags_IsHovered = imgui.enum.ImGuiTableColumnFlags_IsHovered
M.TableColumnFlags_WidthMask_ = imgui.enum.ImGuiTableColumnFlags_WidthMask_
M.TableColumnFlags_IndentMask_ = imgui.enum.ImGuiTableColumnFlags_IndentMask_
M.TableColumnFlags_StatusMask_ = imgui.enum.ImGuiTableColumnFlags_StatusMask_
M.TableColumnFlags_NoDirectResize_ = imgui.enum.ImGuiTableColumnFlags_NoDirectResize_
--===
--=== enum ImGuiTableRowFlags_ ===
M.TableRowFlags_None = imgui.enum.ImGuiTableRowFlags_None
M.TableRowFlags_Headers = imgui.enum.ImGuiTableRowFlags_Headers
--===
--=== enum ImGuiTableBgTarget_ ===
M.TableBgTarget_None = imgui.enum.ImGuiTableBgTarget_None
M.TableBgTarget_RowBg0 = imgui.enum.ImGuiTableBgTarget_RowBg0
M.TableBgTarget_RowBg1 = imgui.enum.ImGuiTableBgTarget_RowBg1
M.TableBgTarget_CellBg = imgui.enum.ImGuiTableBgTarget_CellBg
--===
--=== enum ImGuiFocusedFlags_ ===
M.FocusedFlags_None = imgui.enum.ImGuiFocusedFlags_None
M.FocusedFlags_ChildWindows = imgui.enum.ImGuiFocusedFlags_ChildWindows
M.FocusedFlags_RootWindow = imgui.enum.ImGuiFocusedFlags_RootWindow
M.FocusedFlags_AnyWindow = imgui.enum.ImGuiFocusedFlags_AnyWindow
M.FocusedFlags_NoPopupHierarchy = imgui.enum.ImGuiFocusedFlags_NoPopupHierarchy
M.FocusedFlags_DockHierarchy = imgui.enum.ImGuiFocusedFlags_DockHierarchy
M.FocusedFlags_RootAndChildWindows = imgui.enum.ImGuiFocusedFlags_RootAndChildWindows
--===
--=== enum ImGuiHoveredFlags_ ===
M.HoveredFlags_None = imgui.enum.ImGuiHoveredFlags_None
M.HoveredFlags_ChildWindows = imgui.enum.ImGuiHoveredFlags_ChildWindows
M.HoveredFlags_RootWindow = imgui.enum.ImGuiHoveredFlags_RootWindow
M.HoveredFlags_AnyWindow = imgui.enum.ImGuiHoveredFlags_AnyWindow
M.HoveredFlags_NoPopupHierarchy = imgui.enum.ImGuiHoveredFlags_NoPopupHierarchy
M.HoveredFlags_DockHierarchy = imgui.enum.ImGuiHoveredFlags_DockHierarchy
M.HoveredFlags_AllowWhenBlockedByPopup = imgui.enum.ImGuiHoveredFlags_AllowWhenBlockedByPopup
M.HoveredFlags_AllowWhenBlockedByActiveItem = imgui.enum.ImGuiHoveredFlags_AllowWhenBlockedByActiveItem
M.HoveredFlags_AllowWhenOverlappedByItem = imgui.enum.ImGuiHoveredFlags_AllowWhenOverlappedByItem
M.HoveredFlags_AllowWhenOverlappedByWindow = imgui.enum.ImGuiHoveredFlags_AllowWhenOverlappedByWindow
M.HoveredFlags_AllowWhenDisabled = imgui.enum.ImGuiHoveredFlags_AllowWhenDisabled
M.HoveredFlags_NoNavOverride = imgui.enum.ImGuiHoveredFlags_NoNavOverride
M.HoveredFlags_AllowWhenOverlapped = imgui.enum.ImGuiHoveredFlags_AllowWhenOverlapped
M.HoveredFlags_RectOnly = imgui.enum.ImGuiHoveredFlags_RectOnly
M.HoveredFlags_RootAndChildWindows = imgui.enum.ImGuiHoveredFlags_RootAndChildWindows
M.HoveredFlags_ForTooltip = imgui.enum.ImGuiHoveredFlags_ForTooltip
M.HoveredFlags_Stationary = imgui.enum.ImGuiHoveredFlags_Stationary
M.HoveredFlags_DelayNone = imgui.enum.ImGuiHoveredFlags_DelayNone
M.HoveredFlags_DelayShort = imgui.enum.ImGuiHoveredFlags_DelayShort
M.HoveredFlags_DelayNormal = imgui.enum.ImGuiHoveredFlags_DelayNormal
M.HoveredFlags_NoSharedDelay = imgui.enum.ImGuiHoveredFlags_NoSharedDelay
--===
--=== enum ImGuiDockNodeFlags_ ===
M.DockNodeFlags_None = imgui.enum.ImGuiDockNodeFlags_None
M.DockNodeFlags_KeepAliveOnly = imgui.enum.ImGuiDockNodeFlags_KeepAliveOnly
M.DockNodeFlags_NoDockingInCentralNode = imgui.enum.ImGuiDockNodeFlags_NoDockingInCentralNode
M.DockNodeFlags_PassthruCentralNode = imgui.enum.ImGuiDockNodeFlags_PassthruCentralNode
M.DockNodeFlags_NoSplit = imgui.enum.ImGuiDockNodeFlags_NoSplit
M.DockNodeFlags_NoResize = imgui.enum.ImGuiDockNodeFlags_NoResize
M.DockNodeFlags_AutoHideTabBar = imgui.enum.ImGuiDockNodeFlags_AutoHideTabBar
--===
--=== enum ImGuiDragDropFlags_ ===
M.DragDropFlags_None = imgui.enum.ImGuiDragDropFlags_None
M.DragDropFlags_SourceNoPreviewTooltip = imgui.enum.ImGuiDragDropFlags_SourceNoPreviewTooltip
M.DragDropFlags_SourceNoDisableHover = imgui.enum.ImGuiDragDropFlags_SourceNoDisableHover
M.DragDropFlags_SourceNoHoldToOpenOthers = imgui.enum.ImGuiDragDropFlags_SourceNoHoldToOpenOthers
M.DragDropFlags_SourceAllowNullID = imgui.enum.ImGuiDragDropFlags_SourceAllowNullID
M.DragDropFlags_SourceExtern = imgui.enum.ImGuiDragDropFlags_SourceExtern
M.DragDropFlags_SourceAutoExpirePayload = imgui.enum.ImGuiDragDropFlags_SourceAutoExpirePayload
M.DragDropFlags_AcceptBeforeDelivery = imgui.enum.ImGuiDragDropFlags_AcceptBeforeDelivery
M.DragDropFlags_AcceptNoDrawDefaultRect = imgui.enum.ImGuiDragDropFlags_AcceptNoDrawDefaultRect
M.DragDropFlags_AcceptNoPreviewTooltip = imgui.enum.ImGuiDragDropFlags_AcceptNoPreviewTooltip
M.DragDropFlags_AcceptPeekOnly = imgui.enum.ImGuiDragDropFlags_AcceptPeekOnly
--===
--=== enum ImGuiDataType_ ===
M.DataType_S8 = imgui.enum.ImGuiDataType_S8
M.DataType_U8 = imgui.enum.ImGuiDataType_U8
M.DataType_S16 = imgui.enum.ImGuiDataType_S16
M.DataType_U16 = imgui.enum.ImGuiDataType_U16
M.DataType_S32 = imgui.enum.ImGuiDataType_S32
M.DataType_U32 = imgui.enum.ImGuiDataType_U32
M.DataType_S64 = imgui.enum.ImGuiDataType_S64
M.DataType_U64 = imgui.enum.ImGuiDataType_U64
M.DataType_Float = imgui.enum.ImGuiDataType_Float
M.DataType_Double = imgui.enum.ImGuiDataType_Double
M.DataType_COUNT = imgui.enum.ImGuiDataType_COUNT
--===
--=== enum ImGuiDir_ ===
M.Dir_None = imgui.enum.ImGuiDir_None
M.Dir_Left = imgui.enum.ImGuiDir_Left
M.Dir_Right = imgui.enum.ImGuiDir_Right
M.Dir_Up = imgui.enum.ImGuiDir_Up
M.Dir_Down = imgui.enum.ImGuiDir_Down
M.Dir_COUNT = imgui.enum.ImGuiDir_COUNT
--===
--=== enum ImGuiSortDirection_ ===
M.SortDirection_None = imgui.enum.ImGuiSortDirection_None
M.SortDirection_Ascending = imgui.enum.ImGuiSortDirection_Ascending
M.SortDirection_Descending = imgui.enum.ImGuiSortDirection_Descending
--===
--=== enum ImGuiKey ===
M.Key_None = imgui.enum.ImGuiKey_None
M.Key_Tab = imgui.enum.ImGuiKey_Tab
M.Key_LeftArrow = imgui.enum.ImGuiKey_LeftArrow
M.Key_RightArrow = imgui.enum.ImGuiKey_RightArrow
M.Key_UpArrow = imgui.enum.ImGuiKey_UpArrow
M.Key_DownArrow = imgui.enum.ImGuiKey_DownArrow
M.Key_PageUp = imgui.enum.ImGuiKey_PageUp
M.Key_PageDown = imgui.enum.ImGuiKey_PageDown
M.Key_Home = imgui.enum.ImGuiKey_Home
M.Key_End = imgui.enum.ImGuiKey_End
M.Key_Insert = imgui.enum.ImGuiKey_Insert
M.Key_Delete = imgui.enum.ImGuiKey_Delete
M.Key_Backspace = imgui.enum.ImGuiKey_Backspace
M.Key_Space = imgui.enum.ImGuiKey_Space
M.Key_Enter = imgui.enum.ImGuiKey_Enter
M.Key_Escape = imgui.enum.ImGuiKey_Escape
M.Key_LeftCtrl = imgui.enum.ImGuiKey_LeftCtrl
M.Key_LeftShift = imgui.enum.ImGuiKey_LeftShift
M.Key_LeftAlt = imgui.enum.ImGuiKey_LeftAlt
M.Key_LeftSuper = imgui.enum.ImGuiKey_LeftSuper
M.Key_RightCtrl = imgui.enum.ImGuiKey_RightCtrl
M.Key_RightShift = imgui.enum.ImGuiKey_RightShift
M.Key_RightAlt = imgui.enum.ImGuiKey_RightAlt
M.Key_RightSuper = imgui.enum.ImGuiKey_RightSuper
M.Key_Menu = imgui.enum.ImGuiKey_Menu
M.Key_0 = imgui.enum.ImGuiKey_0
M.Key_1 = imgui.enum.ImGuiKey_1
M.Key_2 = imgui.enum.ImGuiKey_2
M.Key_3 = imgui.enum.ImGuiKey_3
M.Key_4 = imgui.enum.ImGuiKey_4
M.Key_5 = imgui.enum.ImGuiKey_5
M.Key_6 = imgui.enum.ImGuiKey_6
M.Key_7 = imgui.enum.ImGuiKey_7
M.Key_8 = imgui.enum.ImGuiKey_8
M.Key_9 = imgui.enum.ImGuiKey_9
M.Key_A = imgui.enum.ImGuiKey_A
M.Key_B = imgui.enum.ImGuiKey_B
M.Key_C = imgui.enum.ImGuiKey_C
M.Key_D = imgui.enum.ImGuiKey_D
M.Key_E = imgui.enum.ImGuiKey_E
M.Key_F = imgui.enum.ImGuiKey_F
M.Key_G = imgui.enum.ImGuiKey_G
M.Key_H = imgui.enum.ImGuiKey_H
M.Key_I = imgui.enum.ImGuiKey_I
M.Key_J = imgui.enum.ImGuiKey_J
M.Key_K = imgui.enum.ImGuiKey_K
M.Key_L = imgui.enum.ImGuiKey_L
M.Key_M = imgui.enum.ImGuiKey_M
M.Key_N = imgui.enum.ImGuiKey_N
M.Key_O = imgui.enum.ImGuiKey_O
M.Key_P = imgui.enum.ImGuiKey_P
M.Key_Q = imgui.enum.ImGuiKey_Q
M.Key_R = imgui.enum.ImGuiKey_R
M.Key_S = imgui.enum.ImGuiKey_S
M.Key_T = imgui.enum.ImGuiKey_T
M.Key_U = imgui.enum.ImGuiKey_U
M.Key_V = imgui.enum.ImGuiKey_V
M.Key_W = imgui.enum.ImGuiKey_W
M.Key_X = imgui.enum.ImGuiKey_X
M.Key_Y = imgui.enum.ImGuiKey_Y
M.Key_Z = imgui.enum.ImGuiKey_Z
M.Key_F1 = imgui.enum.ImGuiKey_F1
M.Key_F2 = imgui.enum.ImGuiKey_F2
M.Key_F3 = imgui.enum.ImGuiKey_F3
M.Key_F4 = imgui.enum.ImGuiKey_F4
M.Key_F5 = imgui.enum.ImGuiKey_F5
M.Key_F6 = imgui.enum.ImGuiKey_F6
M.Key_F7 = imgui.enum.ImGuiKey_F7
M.Key_F8 = imgui.enum.ImGuiKey_F8
M.Key_F9 = imgui.enum.ImGuiKey_F9
M.Key_F10 = imgui.enum.ImGuiKey_F10
M.Key_F11 = imgui.enum.ImGuiKey_F11
M.Key_F12 = imgui.enum.ImGuiKey_F12
M.Key_Apostrophe = imgui.enum.ImGuiKey_Apostrophe
M.Key_Comma = imgui.enum.ImGuiKey_Comma
M.Key_Minus = imgui.enum.ImGuiKey_Minus
M.Key_Period = imgui.enum.ImGuiKey_Period
M.Key_Slash = imgui.enum.ImGuiKey_Slash
M.Key_Semicolon = imgui.enum.ImGuiKey_Semicolon
M.Key_Equal = imgui.enum.ImGuiKey_Equal
M.Key_LeftBracket = imgui.enum.ImGuiKey_LeftBracket
M.Key_Backslash = imgui.enum.ImGuiKey_Backslash
M.Key_RightBracket = imgui.enum.ImGuiKey_RightBracket
M.Key_GraveAccent = imgui.enum.ImGuiKey_GraveAccent
M.Key_CapsLock = imgui.enum.ImGuiKey_CapsLock
M.Key_ScrollLock = imgui.enum.ImGuiKey_ScrollLock
M.Key_NumLock = imgui.enum.ImGuiKey_NumLock
M.Key_PrintScreen = imgui.enum.ImGuiKey_PrintScreen
M.Key_Pause = imgui.enum.ImGuiKey_Pause
M.Key_Keypad0 = imgui.enum.ImGuiKey_Keypad0
M.Key_Keypad1 = imgui.enum.ImGuiKey_Keypad1
M.Key_Keypad2 = imgui.enum.ImGuiKey_Keypad2
M.Key_Keypad3 = imgui.enum.ImGuiKey_Keypad3
M.Key_Keypad4 = imgui.enum.ImGuiKey_Keypad4
M.Key_Keypad5 = imgui.enum.ImGuiKey_Keypad5
M.Key_Keypad6 = imgui.enum.ImGuiKey_Keypad6
M.Key_Keypad7 = imgui.enum.ImGuiKey_Keypad7
M.Key_Keypad8 = imgui.enum.ImGuiKey_Keypad8
M.Key_Keypad9 = imgui.enum.ImGuiKey_Keypad9
M.Key_KeypadDecimal = imgui.enum.ImGuiKey_KeypadDecimal
M.Key_KeypadDivide = imgui.enum.ImGuiKey_KeypadDivide
M.Key_KeypadMultiply = imgui.enum.ImGuiKey_KeypadMultiply
M.Key_KeypadSubtract = imgui.enum.ImGuiKey_KeypadSubtract
M.Key_KeypadAdd = imgui.enum.ImGuiKey_KeypadAdd
M.Key_KeypadEnter = imgui.enum.ImGuiKey_KeypadEnter
M.Key_KeypadEqual = imgui.enum.ImGuiKey_KeypadEqual
M.Key_GamepadStart = imgui.enum.ImGuiKey_GamepadStart
M.Key_GamepadBack = imgui.enum.ImGuiKey_GamepadBack
M.Key_GamepadFaceLeft = imgui.enum.ImGuiKey_GamepadFaceLeft
M.Key_GamepadFaceRight = imgui.enum.ImGuiKey_GamepadFaceRight
M.Key_GamepadFaceUp = imgui.enum.ImGuiKey_GamepadFaceUp
M.Key_GamepadFaceDown = imgui.enum.ImGuiKey_GamepadFaceDown
M.Key_GamepadDpadLeft = imgui.enum.ImGuiKey_GamepadDpadLeft
M.Key_GamepadDpadRight = imgui.enum.ImGuiKey_GamepadDpadRight
M.Key_GamepadDpadUp = imgui.enum.ImGuiKey_GamepadDpadUp
M.Key_GamepadDpadDown = imgui.enum.ImGuiKey_GamepadDpadDown
M.Key_GamepadL1 = imgui.enum.ImGuiKey_GamepadL1
M.Key_GamepadR1 = imgui.enum.ImGuiKey_GamepadR1
M.Key_GamepadL2 = imgui.enum.ImGuiKey_GamepadL2
M.Key_GamepadR2 = imgui.enum.ImGuiKey_GamepadR2
M.Key_GamepadL3 = imgui.enum.ImGuiKey_GamepadL3
M.Key_GamepadR3 = imgui.enum.ImGuiKey_GamepadR3
M.Key_GamepadLStickLeft = imgui.enum.ImGuiKey_GamepadLStickLeft
M.Key_GamepadLStickRight = imgui.enum.ImGuiKey_GamepadLStickRight
M.Key_GamepadLStickUp = imgui.enum.ImGuiKey_GamepadLStickUp
M.Key_GamepadLStickDown = imgui.enum.ImGuiKey_GamepadLStickDown
M.Key_GamepadRStickLeft = imgui.enum.ImGuiKey_GamepadRStickLeft
M.Key_GamepadRStickRight = imgui.enum.ImGuiKey_GamepadRStickRight
M.Key_GamepadRStickUp = imgui.enum.ImGuiKey_GamepadRStickUp
M.Key_GamepadRStickDown = imgui.enum.ImGuiKey_GamepadRStickDown
M.Key_MouseLeft = imgui.enum.ImGuiKey_MouseLeft
M.Key_MouseRight = imgui.enum.ImGuiKey_MouseRight
M.Key_MouseMiddle = imgui.enum.ImGuiKey_MouseMiddle
M.Key_MouseX1 = imgui.enum.ImGuiKey_MouseX1
M.Key_MouseX2 = imgui.enum.ImGuiKey_MouseX2
M.Key_MouseWheelX = imgui.enum.ImGuiKey_MouseWheelX
M.Key_MouseWheelY = imgui.enum.ImGuiKey_MouseWheelY
M.Key_ReservedForModCtrl = imgui.enum.ImGuiKey_ReservedForModCtrl
M.Key_ReservedForModShift = imgui.enum.ImGuiKey_ReservedForModShift
M.Key_ReservedForModAlt = imgui.enum.ImGuiKey_ReservedForModAlt
M.Key_ReservedForModSuper = imgui.enum.ImGuiKey_ReservedForModSuper
M.Key_COUNT = imgui.enum.ImGuiKey_COUNT
M.Mod_None = imgui.enum.ImGuiMod_None
M.Mod_Ctrl = imgui.enum.ImGuiMod_Ctrl
M.Mod_Shift = imgui.enum.ImGuiMod_Shift
M.Mod_Alt = imgui.enum.ImGuiMod_Alt
M.Mod_Super = imgui.enum.ImGuiMod_Super
M.Mod_Shortcut = imgui.enum.ImGuiMod_Shortcut
M.Mod_Mask_ = imgui.enum.ImGuiMod_Mask_
M.Key_NamedKey_BEGIN = imgui.enum.ImGuiKey_NamedKey_BEGIN
M.Key_NamedKey_END = imgui.enum.ImGuiKey_NamedKey_END
M.Key_NamedKey_COUNT = imgui.enum.ImGuiKey_NamedKey_COUNT
M.Key_KeysData_SIZE = imgui.enum.ImGuiKey_KeysData_SIZE
M.Key_KeysData_OFFSET = imgui.enum.ImGuiKey_KeysData_OFFSET
--===
--=== enum ImGuiNavInput ===
M.NavInput_Activate = imgui.enum.ImGuiNavInput_Activate
M.NavInput_Cancel = imgui.enum.ImGuiNavInput_Cancel
M.NavInput_Input = imgui.enum.ImGuiNavInput_Input
M.NavInput_Menu = imgui.enum.ImGuiNavInput_Menu
M.NavInput_DpadLeft = imgui.enum.ImGuiNavInput_DpadLeft
M.NavInput_DpadRight = imgui.enum.ImGuiNavInput_DpadRight
M.NavInput_DpadUp = imgui.enum.ImGuiNavInput_DpadUp
M.NavInput_DpadDown = imgui.enum.ImGuiNavInput_DpadDown
M.NavInput_LStickLeft = imgui.enum.ImGuiNavInput_LStickLeft
M.NavInput_LStickRight = imgui.enum.ImGuiNavInput_LStickRight
M.NavInput_LStickUp = imgui.enum.ImGuiNavInput_LStickUp
M.NavInput_LStickDown = imgui.enum.ImGuiNavInput_LStickDown
M.NavInput_FocusPrev = imgui.enum.ImGuiNavInput_FocusPrev
M.NavInput_FocusNext = imgui.enum.ImGuiNavInput_FocusNext
M.NavInput_TweakSlow = imgui.enum.ImGuiNavInput_TweakSlow
M.NavInput_TweakFast = imgui.enum.ImGuiNavInput_TweakFast
M.NavInput_COUNT = imgui.enum.ImGuiNavInput_COUNT
--===
--=== enum ImGuiConfigFlags_ ===
M.ConfigFlags_None = imgui.enum.ImGuiConfigFlags_None
M.ConfigFlags_NavEnableKeyboard = imgui.enum.ImGuiConfigFlags_NavEnableKeyboard
M.ConfigFlags_NavEnableGamepad = imgui.enum.ImGuiConfigFlags_NavEnableGamepad
M.ConfigFlags_NavEnableSetMousePos = imgui.enum.ImGuiConfigFlags_NavEnableSetMousePos
M.ConfigFlags_NavNoCaptureKeyboard = imgui.enum.ImGuiConfigFlags_NavNoCaptureKeyboard
M.ConfigFlags_NoMouse = imgui.enum.ImGuiConfigFlags_NoMouse
M.ConfigFlags_NoMouseCursorChange = imgui.enum.ImGuiConfigFlags_NoMouseCursorChange
M.ConfigFlags_DockingEnable = imgui.enum.ImGuiConfigFlags_DockingEnable
M.ConfigFlags_ViewportsEnable = imgui.enum.ImGuiConfigFlags_ViewportsEnable
M.ConfigFlags_DpiEnableScaleViewports = imgui.enum.ImGuiConfigFlags_DpiEnableScaleViewports
M.ConfigFlags_DpiEnableScaleFonts = imgui.enum.ImGuiConfigFlags_DpiEnableScaleFonts
M.ConfigFlags_IsSRGB = imgui.enum.ImGuiConfigFlags_IsSRGB
M.ConfigFlags_IsTouchScreen = imgui.enum.ImGuiConfigFlags_IsTouchScreen
--===
--=== enum ImGuiBackendFlags_ ===
M.BackendFlags_None = imgui.enum.ImGuiBackendFlags_None
M.BackendFlags_HasGamepad = imgui.enum.ImGuiBackendFlags_HasGamepad
M.BackendFlags_HasMouseCursors = imgui.enum.ImGuiBackendFlags_HasMouseCursors
M.BackendFlags_HasSetMousePos = imgui.enum.ImGuiBackendFlags_HasSetMousePos
M.BackendFlags_RendererHasVtxOffset = imgui.enum.ImGuiBackendFlags_RendererHasVtxOffset
M.BackendFlags_PlatformHasViewports = imgui.enum.ImGuiBackendFlags_PlatformHasViewports
M.BackendFlags_HasMouseHoveredViewport = imgui.enum.ImGuiBackendFlags_HasMouseHoveredViewport
M.BackendFlags_RendererHasViewports = imgui.enum.ImGuiBackendFlags_RendererHasViewports
--===
--=== enum ImGuiCol_ ===
M.Col_Text = imgui.enum.ImGuiCol_Text
M.Col_TextDisabled = imgui.enum.ImGuiCol_TextDisabled
M.Col_WindowBg = imgui.enum.ImGuiCol_WindowBg
M.Col_ChildBg = imgui.enum.ImGuiCol_ChildBg
M.Col_PopupBg = imgui.enum.ImGuiCol_PopupBg
M.Col_Border = imgui.enum.ImGuiCol_Border
M.Col_BorderShadow = imgui.enum.ImGuiCol_BorderShadow
M.Col_FrameBg = imgui.enum.ImGuiCol_FrameBg
M.Col_FrameBgHovered = imgui.enum.ImGuiCol_FrameBgHovered
M.Col_FrameBgActive = imgui.enum.ImGuiCol_FrameBgActive
M.Col_TitleBg = imgui.enum.ImGuiCol_TitleBg
M.Col_TitleBgActive = imgui.enum.ImGuiCol_TitleBgActive
M.Col_TitleBgCollapsed = imgui.enum.ImGuiCol_TitleBgCollapsed
M.Col_MenuBarBg = imgui.enum.ImGuiCol_MenuBarBg
M.Col_ScrollbarBg = imgui.enum.ImGuiCol_ScrollbarBg
M.Col_ScrollbarGrab = imgui.enum.ImGuiCol_ScrollbarGrab
M.Col_ScrollbarGrabHovered = imgui.enum.ImGuiCol_ScrollbarGrabHovered
M.Col_ScrollbarGrabActive = imgui.enum.ImGuiCol_ScrollbarGrabActive
M.Col_CheckMark = imgui.enum.ImGuiCol_CheckMark
M.Col_SliderGrab = imgui.enum.ImGuiCol_SliderGrab
M.Col_SliderGrabActive = imgui.enum.ImGuiCol_SliderGrabActive
M.Col_Button = imgui.enum.ImGuiCol_Button
M.Col_ButtonHovered = imgui.enum.ImGuiCol_ButtonHovered
M.Col_ButtonActive = imgui.enum.ImGuiCol_ButtonActive
M.Col_Header = imgui.enum.ImGuiCol_Header
M.Col_HeaderHovered = imgui.enum.ImGuiCol_HeaderHovered
M.Col_HeaderActive = imgui.enum.ImGuiCol_HeaderActive
M.Col_Separator = imgui.enum.ImGuiCol_Separator
M.Col_SeparatorHovered = imgui.enum.ImGuiCol_SeparatorHovered
M.Col_SeparatorActive = imgui.enum.ImGuiCol_SeparatorActive
M.Col_ResizeGrip = imgui.enum.ImGuiCol_ResizeGrip
M.Col_ResizeGripHovered = imgui.enum.ImGuiCol_ResizeGripHovered
M.Col_ResizeGripActive = imgui.enum.ImGuiCol_ResizeGripActive
M.Col_Tab = imgui.enum.ImGuiCol_Tab
M.Col_TabHovered = imgui.enum.ImGuiCol_TabHovered
M.Col_TabActive = imgui.enum.ImGuiCol_TabActive
M.Col_TabUnfocused = imgui.enum.ImGuiCol_TabUnfocused
M.Col_TabUnfocusedActive = imgui.enum.ImGuiCol_TabUnfocusedActive
M.Col_DockingPreview = imgui.enum.ImGuiCol_DockingPreview
M.Col_DockingEmptyBg = imgui.enum.ImGuiCol_DockingEmptyBg
M.Col_PlotLines = imgui.enum.ImGuiCol_PlotLines
M.Col_PlotLinesHovered = imgui.enum.ImGuiCol_PlotLinesHovered
M.Col_PlotHistogram = imgui.enum.ImGuiCol_PlotHistogram
M.Col_PlotHistogramHovered = imgui.enum.ImGuiCol_PlotHistogramHovered
M.Col_TableHeaderBg = imgui.enum.ImGuiCol_TableHeaderBg
M.Col_TableBorderStrong = imgui.enum.ImGuiCol_TableBorderStrong
M.Col_TableBorderLight = imgui.enum.ImGuiCol_TableBorderLight
M.Col_TableRowBg = imgui.enum.ImGuiCol_TableRowBg
M.Col_TableRowBgAlt = imgui.enum.ImGuiCol_TableRowBgAlt
M.Col_TextSelectedBg = imgui.enum.ImGuiCol_TextSelectedBg
M.Col_DragDropTarget = imgui.enum.ImGuiCol_DragDropTarget
M.Col_NavHighlight = imgui.enum.ImGuiCol_NavHighlight
M.Col_NavWindowingHighlight = imgui.enum.ImGuiCol_NavWindowingHighlight
M.Col_NavWindowingDimBg = imgui.enum.ImGuiCol_NavWindowingDimBg
M.Col_ModalWindowDimBg = imgui.enum.ImGuiCol_ModalWindowDimBg
M.Col_COUNT = imgui.enum.ImGuiCol_COUNT
--===
--=== enum ImGuiStyleVar_ ===
M.StyleVar_Alpha = imgui.enum.ImGuiStyleVar_Alpha
M.StyleVar_DisabledAlpha = imgui.enum.ImGuiStyleVar_DisabledAlpha
M.StyleVar_WindowPadding = imgui.enum.ImGuiStyleVar_WindowPadding
M.StyleVar_WindowRounding = imgui.enum.ImGuiStyleVar_WindowRounding
M.StyleVar_WindowBorderSize = imgui.enum.ImGuiStyleVar_WindowBorderSize
M.StyleVar_WindowMinSize = imgui.enum.ImGuiStyleVar_WindowMinSize
M.StyleVar_WindowTitleAlign = imgui.enum.ImGuiStyleVar_WindowTitleAlign
M.StyleVar_ChildRounding = imgui.enum.ImGuiStyleVar_ChildRounding
M.StyleVar_ChildBorderSize = imgui.enum.ImGuiStyleVar_ChildBorderSize
M.StyleVar_PopupRounding = imgui.enum.ImGuiStyleVar_PopupRounding
M.StyleVar_PopupBorderSize = imgui.enum.ImGuiStyleVar_PopupBorderSize
M.StyleVar_FramePadding = imgui.enum.ImGuiStyleVar_FramePadding
M.StyleVar_FrameRounding = imgui.enum.ImGuiStyleVar_FrameRounding
M.StyleVar_FrameBorderSize = imgui.enum.ImGuiStyleVar_FrameBorderSize
M.StyleVar_ItemSpacing = imgui.enum.ImGuiStyleVar_ItemSpacing
M.StyleVar_ItemInnerSpacing = imgui.enum.ImGuiStyleVar_ItemInnerSpacing
M.StyleVar_IndentSpacing = imgui.enum.ImGuiStyleVar_IndentSpacing
M.StyleVar_CellPadding = imgui.enum.ImGuiStyleVar_CellPadding
M.StyleVar_ScrollbarSize = imgui.enum.ImGuiStyleVar_ScrollbarSize
M.StyleVar_ScrollbarRounding = imgui.enum.ImGuiStyleVar_ScrollbarRounding
M.StyleVar_GrabMinSize = imgui.enum.ImGuiStyleVar_GrabMinSize
M.StyleVar_GrabRounding = imgui.enum.ImGuiStyleVar_GrabRounding
M.StyleVar_TabRounding = imgui.enum.ImGuiStyleVar_TabRounding
M.StyleVar_ButtonTextAlign = imgui.enum.ImGuiStyleVar_ButtonTextAlign
M.StyleVar_SelectableTextAlign = imgui.enum.ImGuiStyleVar_SelectableTextAlign
M.StyleVar_SeparatorTextBorderSize = imgui.enum.ImGuiStyleVar_SeparatorTextBorderSize
M.StyleVar_SeparatorTextAlign = imgui.enum.ImGuiStyleVar_SeparatorTextAlign
M.StyleVar_SeparatorTextPadding = imgui.enum.ImGuiStyleVar_SeparatorTextPadding
M.StyleVar_DockingSeparatorSize = imgui.enum.ImGuiStyleVar_DockingSeparatorSize
M.StyleVar_COUNT = imgui.enum.ImGuiStyleVar_COUNT
--===
--=== enum ImGuiButtonFlags_ ===
M.ButtonFlags_None = imgui.enum.ImGuiButtonFlags_None
M.ButtonFlags_MouseButtonLeft = imgui.enum.ImGuiButtonFlags_MouseButtonLeft
M.ButtonFlags_MouseButtonRight = imgui.enum.ImGuiButtonFlags_MouseButtonRight
M.ButtonFlags_MouseButtonMiddle = imgui.enum.ImGuiButtonFlags_MouseButtonMiddle
M.ButtonFlags_MouseButtonMask_ = imgui.enum.ImGuiButtonFlags_MouseButtonMask_
M.ButtonFlags_MouseButtonDefault_ = imgui.enum.ImGuiButtonFlags_MouseButtonDefault_
--===
--=== enum ImGuiColorEditFlags_ ===
M.ColorEditFlags_None = imgui.enum.ImGuiColorEditFlags_None
M.ColorEditFlags_NoAlpha = imgui.enum.ImGuiColorEditFlags_NoAlpha
M.ColorEditFlags_NoPicker = imgui.enum.ImGuiColorEditFlags_NoPicker
M.ColorEditFlags_NoOptions = imgui.enum.ImGuiColorEditFlags_NoOptions
M.ColorEditFlags_NoSmallPreview = imgui.enum.ImGuiColorEditFlags_NoSmallPreview
M.ColorEditFlags_NoInputs = imgui.enum.ImGuiColorEditFlags_NoInputs
M.ColorEditFlags_NoTooltip = imgui.enum.ImGuiColorEditFlags_NoTooltip
M.ColorEditFlags_NoLabel = imgui.enum.ImGuiColorEditFlags_NoLabel
M.ColorEditFlags_NoSidePreview = imgui.enum.ImGuiColorEditFlags_NoSidePreview
M.ColorEditFlags_NoDragDrop = imgui.enum.ImGuiColorEditFlags_NoDragDrop
M.ColorEditFlags_NoBorder = imgui.enum.ImGuiColorEditFlags_NoBorder
M.ColorEditFlags_AlphaBar = imgui.enum.ImGuiColorEditFlags_AlphaBar
M.ColorEditFlags_AlphaPreview = imgui.enum.ImGuiColorEditFlags_AlphaPreview
M.ColorEditFlags_AlphaPreviewHalf = imgui.enum.ImGuiColorEditFlags_AlphaPreviewHalf
M.ColorEditFlags_HDR = imgui.enum.ImGuiColorEditFlags_HDR
M.ColorEditFlags_DisplayRGB = imgui.enum.ImGuiColorEditFlags_DisplayRGB
M.ColorEditFlags_DisplayHSV = imgui.enum.ImGuiColorEditFlags_DisplayHSV
M.ColorEditFlags_DisplayHex = imgui.enum.ImGuiColorEditFlags_DisplayHex
M.ColorEditFlags_Uint8 = imgui.enum.ImGuiColorEditFlags_Uint8
M.ColorEditFlags_Float = imgui.enum.ImGuiColorEditFlags_Float
M.ColorEditFlags_PickerHueBar = imgui.enum.ImGuiColorEditFlags_PickerHueBar
M.ColorEditFlags_PickerHueWheel = imgui.enum.ImGuiColorEditFlags_PickerHueWheel
M.ColorEditFlags_InputRGB = imgui.enum.ImGuiColorEditFlags_InputRGB
M.ColorEditFlags_InputHSV = imgui.enum.ImGuiColorEditFlags_InputHSV
M.ColorEditFlags_DefaultOptions_ = imgui.enum.ImGuiColorEditFlags_DefaultOptions_
M.ColorEditFlags_DisplayMask_ = imgui.enum.ImGuiColorEditFlags_DisplayMask_
M.ColorEditFlags_DataTypeMask_ = imgui.enum.ImGuiColorEditFlags_DataTypeMask_
M.ColorEditFlags_PickerMask_ = imgui.enum.ImGuiColorEditFlags_PickerMask_
M.ColorEditFlags_InputMask_ = imgui.enum.ImGuiColorEditFlags_InputMask_
--===
--=== enum ImGuiSliderFlags_ ===
M.SliderFlags_None = imgui.enum.ImGuiSliderFlags_None
M.SliderFlags_AlwaysClamp = imgui.enum.ImGuiSliderFlags_AlwaysClamp
M.SliderFlags_Logarithmic = imgui.enum.ImGuiSliderFlags_Logarithmic
M.SliderFlags_NoRoundToFormat = imgui.enum.ImGuiSliderFlags_NoRoundToFormat
M.SliderFlags_NoInput = imgui.enum.ImGuiSliderFlags_NoInput
M.SliderFlags_InvalidMask_ = imgui.enum.ImGuiSliderFlags_InvalidMask_
--===
--=== enum ImGuiMouseButton_ ===
M.MouseButton_Left = imgui.enum.ImGuiMouseButton_Left
M.MouseButton_Right = imgui.enum.ImGuiMouseButton_Right
M.MouseButton_Middle = imgui.enum.ImGuiMouseButton_Middle
M.MouseButton_COUNT = imgui.enum.ImGuiMouseButton_COUNT
--===
--=== enum ImGuiMouseCursor_ ===
M.MouseCursor_None = imgui.enum.ImGuiMouseCursor_None
M.MouseCursor_Arrow = imgui.enum.ImGuiMouseCursor_Arrow
M.MouseCursor_TextInput = imgui.enum.ImGuiMouseCursor_TextInput
M.MouseCursor_ResizeAll = imgui.enum.ImGuiMouseCursor_ResizeAll
M.MouseCursor_ResizeNS = imgui.enum.ImGuiMouseCursor_ResizeNS
M.MouseCursor_ResizeEW = imgui.enum.ImGuiMouseCursor_ResizeEW
M.MouseCursor_ResizeNESW = imgui.enum.ImGuiMouseCursor_ResizeNESW
M.MouseCursor_ResizeNWSE = imgui.enum.ImGuiMouseCursor_ResizeNWSE
M.MouseCursor_Hand = imgui.enum.ImGuiMouseCursor_Hand
M.MouseCursor_NotAllowed = imgui.enum.ImGuiMouseCursor_NotAllowed
M.MouseCursor_COUNT = imgui.enum.ImGuiMouseCursor_COUNT
--===
--=== enum ImGuiMouseSource ===
M.MouseSource_Mouse = imgui.enum.ImGuiMouseSource_Mouse
M.MouseSource_TouchScreen = imgui.enum.ImGuiMouseSource_TouchScreen
M.MouseSource_Pen = imgui.enum.ImGuiMouseSource_Pen
M.MouseSource_COUNT = imgui.enum.ImGuiMouseSource_COUNT
--===
--=== enum ImGuiCond_ ===
M.Cond_None = imgui.enum.ImGuiCond_None
M.Cond_Always = imgui.enum.ImGuiCond_Always
M.Cond_Once = imgui.enum.ImGuiCond_Once
M.Cond_FirstUseEver = imgui.enum.ImGuiCond_FirstUseEver
M.Cond_Appearing = imgui.enum.ImGuiCond_Appearing
--===
--=== struct ImNewWrapper ===
--===
--=== struct ImGuiStyle ===
function M.ImGuiStyle() return imgui.ImGuiStyle() end
function M.ImGuiStylePtr() return imgui.ImGuiStyle() end
function M.ImGuiStyle_ScaleAllSizes(ImGuiStyle_ctx, float_scale_factor) ImGuiStyle_ctx:ScaleAllSizes(float_scale_factor) end
--===
--=== struct ImGuiKeyData ===
--===
--=== struct ImGuiIO ===
function M.ImGuiIO_AddKeyEvent(ImGuiIO_ctx, ImGuiKey_key, bool_down) ImGuiIO_ctx:AddKeyEvent(ImGuiKey_key, bool_down) end
function M.ImGuiIO_AddKeyAnalogEvent(ImGuiIO_ctx, ImGuiKey_key, bool_down, float_v) ImGuiIO_ctx:AddKeyAnalogEvent(ImGuiKey_key, bool_down, float_v) end
function M.ImGuiIO_AddMousePosEvent(ImGuiIO_ctx, float_x, float_y) ImGuiIO_ctx:AddMousePosEvent(float_x, float_y) end
function M.ImGuiIO_AddMouseButtonEvent(ImGuiIO_ctx, int_button, bool_down) ImGuiIO_ctx:AddMouseButtonEvent(int_button, bool_down) end
function M.ImGuiIO_AddMouseWheelEvent(ImGuiIO_ctx, float_wheel_x, float_wheel_y) ImGuiIO_ctx:AddMouseWheelEvent(float_wheel_x, float_wheel_y) end
function M.ImGuiIO_AddMouseSourceEvent(ImGuiIO_ctx, ImGuiMouseSource_source) ImGuiIO_ctx:AddMouseSourceEvent(ImGuiMouseSource_source) end
function M.ImGuiIO_AddMouseViewportEvent(ImGuiIO_ctx, ImGuiID_id) ImGuiIO_ctx:AddMouseViewportEvent(ImGuiID_id) end
function M.ImGuiIO_AddFocusEvent(ImGuiIO_ctx, bool_focused) ImGuiIO_ctx:AddFocusEvent(bool_focused) end
function M.ImGuiIO_AddInputCharacter(ImGuiIO_ctx, int_c) ImGuiIO_ctx:AddInputCharacter(int_c) end
function M.ImGuiIO_AddInputCharacterUTF16(ImGuiIO_ctx, ImWchar16_c) ImGuiIO_ctx:AddInputCharacterUTF16(ImWchar16_c) end
function M.ImGuiIO_AddInputCharactersUTF8(ImGuiIO_ctx, string_str)
  if string_str == nil then log("E", "", "Parameter 'string_str' of function 'AddInputCharactersUTF8' cannot be nil, as the c type is 'const char *'") ; return end
  ImGuiIO_ctx:AddInputCharactersUTF8(string_str)
end
function M.ImGuiIO_SetKeyEventNativeData(ImGuiIO_ctx, ImGuiKey_key, int_native_keycode, int_native_scancode, int_native_legacy_index)
  if int_native_legacy_index == nil then int_native_legacy_index = -1 end
  ImGuiIO_ctx:SetKeyEventNativeData(ImGuiKey_key, int_native_keycode, int_native_scancode, int_native_legacy_index)
end
function M.ImGuiIO_SetAppAcceptingEvents(ImGuiIO_ctx, bool_accepting_events) ImGuiIO_ctx:SetAppAcceptingEvents(bool_accepting_events) end
function M.ImGuiIO_ClearEventsQueue(ImGuiIO_ctx) ImGuiIO_ctx:ClearEventsQueue() end
function M.ImGuiIO_ClearInputKeys(ImGuiIO_ctx) ImGuiIO_ctx:ClearInputKeys() end
function M.ImGuiIO() return imgui.ImGuiIO() end
function M.ImGuiIOPtr() return imgui.ImGuiIO() end
--===
--=== struct ImGuiSizeCallbackData ===
--===
--=== struct ImGuiWindowClass ===
function M.ImGuiWindowClass() return imgui.ImGuiWindowClass() end
function M.ImGuiWindowClassPtr() return imgui.ImGuiWindowClass() end
--===
--=== struct ImGuiPayload ===
function M.ImGuiPayload() return imgui.ImGuiPayload() end
function M.ImGuiPayloadPtr() return imgui.ImGuiPayload() end
function M.ImGuiPayload_Clear(ImGuiPayload_ctx) ImGuiPayload_ctx:Clear() end
function M.ImGuiPayload_IsDataType(ImGuiPayload_ctx, string_type)
  if string_type == nil then log("E", "", "Parameter 'string_type' of function 'IsDataType' cannot be nil, as the c type is 'const char *'") ; return end
  return ImGuiPayload_ctx:IsDataType(string_type)
end
function M.ImGuiPayload_IsPreview(ImGuiPayload_ctx) return ImGuiPayload_ctx:IsPreview() end
function M.ImGuiPayload_IsDelivery(ImGuiPayload_ctx) return ImGuiPayload_ctx:IsDelivery() end
--===
--=== struct ImGuiTableColumnSortSpecs ===
function M.ImGuiTableColumnSortSpecs() return imgui.ImGuiTableColumnSortSpecs() end
function M.ImGuiTableColumnSortSpecsPtr() return imgui.ImGuiTableColumnSortSpecs() end
--===
--=== struct ImGuiTableSortSpecs ===
function M.ImGuiTableSortSpecs() return imgui.ImGuiTableSortSpecs() end
function M.ImGuiTableSortSpecsPtr() return imgui.ImGuiTableSortSpecs() end
--===
--=== struct ImGuiTextFilter ===
function M.ImGuiTextFilter_Draw(ImGuiTextFilter_ctx, string_label, float_width)
  if string_label == nil then string_label = "Filter (inc,-exc)" end
  if float_width == nil then float_width = 0 end
  return ImGuiTextFilter_ctx:Draw(string_label, float_width)
end
function M.ImGuiTextFilter_PassFilter(ImGuiTextFilter_ctx, string_text, string_text_end)
  -- string_text_end is optional and can be nil
  if string_text == nil then log("E", "", "Parameter 'string_text' of function 'PassFilter' cannot be nil, as the c type is 'const char *'") ; return end
  return ImGuiTextFilter_ctx:PassFilter(string_text, string_text_end)
end
function M.ImGuiTextFilter_Build(ImGuiTextFilter_ctx) ImGuiTextFilter_ctx:Build() end
function M.ImGuiTextFilter_Clear(ImGuiTextFilter_ctx) ImGuiTextFilter_ctx:Clear() end
function M.ImGuiTextFilter_IsActive(ImGuiTextFilter_ctx) return ImGuiTextFilter_ctx:IsActive() end
--===
--=== struct ImGuiStorage ===
function M.ImGuiStorage_Clear(ImGuiStorage_ctx) ImGuiStorage_ctx:Clear() end
function M.ImGuiStorage_GetInt(ImGuiStorage_ctx, ImGuiID_key, int_default_val)
  if int_default_val == nil then int_default_val = 0 end
  return ImGuiStorage_ctx:GetInt(ImGuiID_key, int_default_val)
end
function M.ImGuiStorage_SetInt(ImGuiStorage_ctx, ImGuiID_key, int_val) ImGuiStorage_ctx:SetInt(ImGuiID_key, int_val) end
function M.ImGuiStorage_GetBool(ImGuiStorage_ctx, ImGuiID_key, bool_default_val)
  if bool_default_val == nil then bool_default_val = false end
  return ImGuiStorage_ctx:GetBool(ImGuiID_key, bool_default_val)
end
function M.ImGuiStorage_SetBool(ImGuiStorage_ctx, ImGuiID_key, bool_val) ImGuiStorage_ctx:SetBool(ImGuiID_key, bool_val) end
function M.ImGuiStorage_GetFloat(ImGuiStorage_ctx, ImGuiID_key, float_default_val)
  if float_default_val == nil then float_default_val = 0 end
  return ImGuiStorage_ctx:GetFloat(ImGuiID_key, float_default_val)
end
function M.ImGuiStorage_SetFloat(ImGuiStorage_ctx, ImGuiID_key, float_val) ImGuiStorage_ctx:SetFloat(ImGuiID_key, float_val) end
function M.ImGuiStorage_GetVoidPtr(ImGuiStorage_ctx, ImGuiID_key) return ImGuiStorage_ctx:GetVoidPtr(ImGuiID_key) end
function M.ImGuiStorage_SetVoidPtr(ImGuiStorage_ctx, ImGuiID_key, void_val)
  if void_val == nil then log("E", "", "Parameter 'void_val' of function 'SetVoidPtr' cannot be nil, as the c type is 'void *'") ; return end
  ImGuiStorage_ctx:SetVoidPtr(ImGuiID_key, void_val)
end
function M.ImGuiStorage_GetIntRef(ImGuiStorage_ctx, ImGuiID_key, int_default_val)
  if int_default_val == nil then int_default_val = 0 end
  return ImGuiStorage_ctx:GetIntRef(ImGuiID_key, int_default_val)
end
function M.ImGuiStorage_GetBoolRef(ImGuiStorage_ctx, ImGuiID_key, bool_default_val)
  if bool_default_val == nil then bool_default_val = false end
  return ImGuiStorage_ctx:GetBoolRef(ImGuiID_key, bool_default_val)
end
function M.ImGuiStorage_GetFloatRef(ImGuiStorage_ctx, ImGuiID_key, float_default_val)
  if float_default_val == nil then float_default_val = 0 end
  return ImGuiStorage_ctx:GetFloatRef(ImGuiID_key, float_default_val)
end
function M.ImGuiStorage_GetVoidPtrRef(ImGuiStorage_ctx, ImGuiID_key, void_default_val)
  -- void_default_val is optional and can be nil
  return ImGuiStorage_ctx:GetVoidPtrRef(ImGuiID_key, void_default_val)
end
function M.ImGuiStorage_SetAllInt(ImGuiStorage_ctx, int_val) ImGuiStorage_ctx:SetAllInt(int_val) end
function M.ImGuiStorage_BuildSortByKey(ImGuiStorage_ctx) ImGuiStorage_ctx:BuildSortByKey() end
--===
--=== struct ImGuiListClipper ===
function M.ImGuiListClipper() return imgui.ImGuiListClipper() end
function M.ImGuiListClipperPtr() return imgui.ImGuiListClipper() end
function M.ImGuiListClipper_Begin(ImGuiListClipper_ctx, int_items_count, float_items_height)
  if float_items_height == nil then float_items_height = -1 end
  ImGuiListClipper_ctx:Begin(int_items_count, float_items_height)
end
function M.ImGuiListClipper_End(ImGuiListClipper_ctx) ImGuiListClipper_ctx:End() end
function M.ImGuiListClipper_Step(ImGuiListClipper_ctx) return ImGuiListClipper_ctx:Step() end
function M.ImGuiListClipper_IncludeRangeByIndices(ImGuiListClipper_ctx, int_item_begin, int_item_end) ImGuiListClipper_ctx:IncludeRangeByIndices(int_item_begin, int_item_end) end
--===
--=== struct ImColor ===
function M.ImColor() return imgui.ImColor() end
function M.ImColorPtr() return imgui.ImColor() end
function M.ImColor_SetHSV(ImColor_ctx, float_h, float_s, float_v, float_a)
  if float_a == nil then float_a = 1 end
  ImColor_ctx:SetHSV(float_h, float_s, float_v, float_a)
end
function M.ImColor_HSV(ImColor_ctx, float_h, float_s, float_v, float_a)
  if float_a == nil then float_a = 1 end
  return ImColor_ctx:HSV(float_h, float_s, float_v, float_a)
end
--===
--=== enum ImDrawFlags_ ===
M.ImDrawFlags_None = imgui.enum.ImDrawFlags_None
M.ImDrawFlags_Closed = imgui.enum.ImDrawFlags_Closed
M.ImDrawFlags_RoundCornersTopLeft = imgui.enum.ImDrawFlags_RoundCornersTopLeft
M.ImDrawFlags_RoundCornersTopRight = imgui.enum.ImDrawFlags_RoundCornersTopRight
M.ImDrawFlags_RoundCornersBottomLeft = imgui.enum.ImDrawFlags_RoundCornersBottomLeft
M.ImDrawFlags_RoundCornersBottomRight = imgui.enum.ImDrawFlags_RoundCornersBottomRight
M.ImDrawFlags_RoundCornersNone = imgui.enum.ImDrawFlags_RoundCornersNone
M.ImDrawFlags_RoundCornersTop = imgui.enum.ImDrawFlags_RoundCornersTop
M.ImDrawFlags_RoundCornersBottom = imgui.enum.ImDrawFlags_RoundCornersBottom
M.ImDrawFlags_RoundCornersLeft = imgui.enum.ImDrawFlags_RoundCornersLeft
M.ImDrawFlags_RoundCornersRight = imgui.enum.ImDrawFlags_RoundCornersRight
M.ImDrawFlags_RoundCornersAll = imgui.enum.ImDrawFlags_RoundCornersAll
M.ImDrawFlags_RoundCornersDefault_ = imgui.enum.ImDrawFlags_RoundCornersDefault_
M.ImDrawFlags_RoundCornersMask_ = imgui.enum.ImDrawFlags_RoundCornersMask_
--===
--=== enum ImDrawListFlags_ ===
M.ImDrawListFlags_None = imgui.enum.ImDrawListFlags_None
M.ImDrawListFlags_AntiAliasedLines = imgui.enum.ImDrawListFlags_AntiAliasedLines
M.ImDrawListFlags_AntiAliasedLinesUseTex = imgui.enum.ImDrawListFlags_AntiAliasedLinesUseTex
M.ImDrawListFlags_AntiAliasedFill = imgui.enum.ImDrawListFlags_AntiAliasedFill
M.ImDrawListFlags_AllowVtxOffset = imgui.enum.ImDrawListFlags_AllowVtxOffset
--===
--=== struct ImDrawList ===
function M.ImDrawList_PushClipRect(ImDrawList_ctx, ImVec2_clip_rect_min, ImVec2_clip_rect_max, bool_intersect_with_current_clip_rect)
  if bool_intersect_with_current_clip_rect == nil then bool_intersect_with_current_clip_rect = false end
  ImDrawList_ctx:PushClipRect(ImVec2_clip_rect_min, ImVec2_clip_rect_max, bool_intersect_with_current_clip_rect)
end
function M.ImDrawList_PushClipRectFullScreen(ImDrawList_ctx) ImDrawList_ctx:PushClipRectFullScreen() end
function M.ImDrawList_PopClipRect(ImDrawList_ctx) ImDrawList_ctx:PopClipRect() end
function M.ImDrawList_PushTextureID(ImDrawList_ctx, ImTextureID_texture_id) ImDrawList_ctx:PushTextureID(ImTextureID_texture_id) end
function M.ImDrawList_PopTextureID(ImDrawList_ctx) ImDrawList_ctx:PopTextureID() end
function M.ImDrawList_GetClipRectMin(ImDrawList_ctx) return ImDrawList_ctx:GetClipRectMin() end
function M.ImDrawList_GetClipRectMax(ImDrawList_ctx) return ImDrawList_ctx:GetClipRectMax() end
function M.ImDrawList_AddLine(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImU32_col, float_thickness)
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:AddLine(ImVec2_p1, ImVec2_p2, ImU32_col, float_thickness)
end
function M.ImDrawList_AddRect(ImDrawList_ctx, ImVec2_p_min, ImVec2_p_max, ImU32_col, float_rounding, ImDrawFlags_flags, float_thickness)
  if float_rounding == nil then float_rounding = 0 end
  if ImDrawFlags_flags == nil then ImDrawFlags_flags = 0 end
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:AddRect(ImVec2_p_min, ImVec2_p_max, ImU32_col, float_rounding, ImDrawFlags_flags, float_thickness)
end
function M.ImDrawList_AddRectFilled(ImDrawList_ctx, ImVec2_p_min, ImVec2_p_max, ImU32_col, float_rounding, ImDrawFlags_flags)
  if float_rounding == nil then float_rounding = 0 end
  if ImDrawFlags_flags == nil then ImDrawFlags_flags = 0 end
  ImDrawList_ctx:AddRectFilled(ImVec2_p_min, ImVec2_p_max, ImU32_col, float_rounding, ImDrawFlags_flags)
end
function M.ImDrawList_AddRectFilledMultiColor(ImDrawList_ctx, ImVec2_p_min, ImVec2_p_max, ImU32_col_upr_left, ImU32_col_upr_right, ImU32_col_bot_right, ImU32_col_bot_left) ImDrawList_ctx:AddRectFilledMultiColor(ImVec2_p_min, ImVec2_p_max, ImU32_col_upr_left, ImU32_col_upr_right, ImU32_col_bot_right, ImU32_col_bot_left) end
function M.ImDrawList_AddQuad(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImU32_col, float_thickness)
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:AddQuad(ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImU32_col, float_thickness)
end
function M.ImDrawList_AddQuadFilled(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImU32_col) ImDrawList_ctx:AddQuadFilled(ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImU32_col) end
function M.ImDrawList_AddTriangle(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImU32_col, float_thickness)
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:AddTriangle(ImVec2_p1, ImVec2_p2, ImVec2_p3, ImU32_col, float_thickness)
end
function M.ImDrawList_AddTriangleFilled(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImU32_col) ImDrawList_ctx:AddTriangleFilled(ImVec2_p1, ImVec2_p2, ImVec2_p3, ImU32_col) end
function M.ImDrawList_AddCircle(ImDrawList_ctx, ImVec2_center, float_radius, ImU32_col, int_num_segments, float_thickness)
  if int_num_segments == nil then int_num_segments = 0 end
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:AddCircle(ImVec2_center, float_radius, ImU32_col, int_num_segments, float_thickness)
end
function M.ImDrawList_AddCircleFilled(ImDrawList_ctx, ImVec2_center, float_radius, ImU32_col, int_num_segments)
  if int_num_segments == nil then int_num_segments = 0 end
  ImDrawList_ctx:AddCircleFilled(ImVec2_center, float_radius, ImU32_col, int_num_segments)
end
function M.ImDrawList_AddNgon(ImDrawList_ctx, ImVec2_center, float_radius, ImU32_col, int_num_segments, float_thickness)
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:AddNgon(ImVec2_center, float_radius, ImU32_col, int_num_segments, float_thickness)
end
function M.ImDrawList_AddNgonFilled(ImDrawList_ctx, ImVec2_center, float_radius, ImU32_col, int_num_segments) ImDrawList_ctx:AddNgonFilled(ImVec2_center, float_radius, ImU32_col, int_num_segments) end
function M.ImDrawList_AddText1(ImDrawList_ctx, ImVec2_pos, ImU32_col, string_text_begin, string_text_end)
  -- string_text_end is optional and can be nil
  if string_text_begin == nil then log("E", "", "Parameter 'string_text_begin' of function 'AddText1' cannot be nil, as the c type is 'const char *'") ; return end
  ImDrawList_ctx:AddText1(ImVec2_pos, ImU32_col, string_text_begin, string_text_end)
end
function M.ImDrawList_AddText2(ImDrawList_ctx, ImFont_font, float_font_size, ImVec2_pos, ImU32_col, string_text_begin, string_text_end, float_wrap_width, ImVec4_cpu_fine_clip_rect)
  -- string_text_end is optional and can be nil
  if float_wrap_width == nil then float_wrap_width = 0 end
  -- ImVec4_cpu_fine_clip_rect is optional and can be nil
  if ImFont_font == nil then log("E", "", "Parameter 'ImFont_font' of function 'AddText2' cannot be nil, as the c type is 'const ImFont *'") ; return end
  if string_text_begin == nil then log("E", "", "Parameter 'string_text_begin' of function 'AddText2' cannot be nil, as the c type is 'const char *'") ; return end
  ImDrawList_ctx:AddText2(ImFont_font, float_font_size, ImVec2_pos, ImU32_col, string_text_begin, string_text_end, float_wrap_width, ImVec4_cpu_fine_clip_rect)
end
function M.ImDrawList_AddPolyline(ImDrawList_ctx, ImVec2_points, int_num_points, ImU32_col, ImDrawFlags_flags, float_thickness)
  if ImVec2_points == nil then log("E", "", "Parameter 'ImVec2_points' of function 'AddPolyline' cannot be nil, as the c type is 'const ImVec2 *'") ; return end
  ImDrawList_ctx:AddPolyline(ImVec2_points, int_num_points, ImU32_col, ImDrawFlags_flags, float_thickness)
end
function M.ImDrawList_AddConvexPolyFilled(ImDrawList_ctx, ImVec2_points, int_num_points, ImU32_col)
  if ImVec2_points == nil then log("E", "", "Parameter 'ImVec2_points' of function 'AddConvexPolyFilled' cannot be nil, as the c type is 'const ImVec2 *'") ; return end
  ImDrawList_ctx:AddConvexPolyFilled(ImVec2_points, int_num_points, ImU32_col)
end
function M.ImDrawList_AddBezierCubic(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImU32_col, float_thickness, int_num_segments)
  if int_num_segments == nil then int_num_segments = 0 end
  ImDrawList_ctx:AddBezierCubic(ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImU32_col, float_thickness, int_num_segments)
end
function M.ImDrawList_AddBezierQuadratic(ImDrawList_ctx, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImU32_col, float_thickness, int_num_segments)
  if int_num_segments == nil then int_num_segments = 0 end
  ImDrawList_ctx:AddBezierQuadratic(ImVec2_p1, ImVec2_p2, ImVec2_p3, ImU32_col, float_thickness, int_num_segments)
end
function M.ImDrawList_AddImage(ImDrawList_ctx, ImTextureID_user_texture_id, ImVec2_p_min, ImVec2_p_max, ImVec2_uv_min, ImVec2_uv_max, ImU32_col)
  if ImVec2_uv_min == nil then ImVec2_uv_min = M.ImVec2(0,0) end
  if ImVec2_uv_max == nil then ImVec2_uv_max = M.ImVec2(1,1) end
  if ImU32_col == nil then ImU32_col = IM_COL32_WHITE end
  ImDrawList_ctx:AddImage(ImTextureID_user_texture_id, ImVec2_p_min, ImVec2_p_max, ImVec2_uv_min, ImVec2_uv_max, ImU32_col)
end
function M.ImDrawList_AddImageQuad(ImDrawList_ctx, ImTextureID_user_texture_id, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImVec2_uv1, ImVec2_uv2, ImVec2_uv3, ImVec2_uv4, ImU32_col)
  if ImVec2_uv1 == nil then ImVec2_uv1 = M.ImVec2(0,0) end
  if ImVec2_uv2 == nil then ImVec2_uv2 = M.ImVec2(1,0) end
  if ImVec2_uv3 == nil then ImVec2_uv3 = M.ImVec2(1,1) end
  if ImVec2_uv4 == nil then ImVec2_uv4 = M.ImVec2(0,1) end
  if ImU32_col == nil then ImU32_col = IM_COL32_WHITE end
  ImDrawList_ctx:AddImageQuad(ImTextureID_user_texture_id, ImVec2_p1, ImVec2_p2, ImVec2_p3, ImVec2_p4, ImVec2_uv1, ImVec2_uv2, ImVec2_uv3, ImVec2_uv4, ImU32_col)
end
function M.ImDrawList_AddImageRounded(ImDrawList_ctx, ImTextureID_user_texture_id, ImVec2_p_min, ImVec2_p_max, ImVec2_uv_min, ImVec2_uv_max, ImU32_col, float_rounding, ImDrawFlags_flags)
  if ImDrawFlags_flags == nil then ImDrawFlags_flags = 0 end
  ImDrawList_ctx:AddImageRounded(ImTextureID_user_texture_id, ImVec2_p_min, ImVec2_p_max, ImVec2_uv_min, ImVec2_uv_max, ImU32_col, float_rounding, ImDrawFlags_flags)
end
function M.ImDrawList_PathClear(ImDrawList_ctx) ImDrawList_ctx:PathClear() end
function M.ImDrawList_PathLineTo(ImDrawList_ctx, ImVec2_pos) ImDrawList_ctx:PathLineTo(ImVec2_pos) end
function M.ImDrawList_PathLineToMergeDuplicate(ImDrawList_ctx, ImVec2_pos) ImDrawList_ctx:PathLineToMergeDuplicate(ImVec2_pos) end
function M.ImDrawList_PathFillConvex(ImDrawList_ctx, ImU32_col) ImDrawList_ctx:PathFillConvex(ImU32_col) end
function M.ImDrawList_PathStroke(ImDrawList_ctx, ImU32_col, ImDrawFlags_flags, float_thickness)
  if ImDrawFlags_flags == nil then ImDrawFlags_flags = 0 end
  if float_thickness == nil then float_thickness = 1 end
  ImDrawList_ctx:PathStroke(ImU32_col, ImDrawFlags_flags, float_thickness)
end
function M.ImDrawList_PathArcTo(ImDrawList_ctx, ImVec2_center, float_radius, float_a_min, float_a_max, int_num_segments)
  if int_num_segments == nil then int_num_segments = 0 end
  ImDrawList_ctx:PathArcTo(ImVec2_center, float_radius, float_a_min, float_a_max, int_num_segments)
end
function M.ImDrawList_PathArcToFast(ImDrawList_ctx, ImVec2_center, float_radius, int_a_min_of_12, int_a_max_of_12) ImDrawList_ctx:PathArcToFast(ImVec2_center, float_radius, int_a_min_of_12, int_a_max_of_12) end
function M.ImDrawList_PathBezierCubicCurveTo(ImDrawList_ctx, ImVec2_p2, ImVec2_p3, ImVec2_p4, int_num_segments)
  if int_num_segments == nil then int_num_segments = 0 end
  ImDrawList_ctx:PathBezierCubicCurveTo(ImVec2_p2, ImVec2_p3, ImVec2_p4, int_num_segments)
end
function M.ImDrawList_PathBezierQuadraticCurveTo(ImDrawList_ctx, ImVec2_p2, ImVec2_p3, int_num_segments)
  if int_num_segments == nil then int_num_segments = 0 end
  ImDrawList_ctx:PathBezierQuadraticCurveTo(ImVec2_p2, ImVec2_p3, int_num_segments)
end
function M.ImDrawList_PathRect(ImDrawList_ctx, ImVec2_rect_min, ImVec2_rect_max, float_rounding, ImDrawFlags_flags)
  if float_rounding == nil then float_rounding = 0 end
  if ImDrawFlags_flags == nil then ImDrawFlags_flags = 0 end
  ImDrawList_ctx:PathRect(ImVec2_rect_min, ImVec2_rect_max, float_rounding, ImDrawFlags_flags)
end
function M.ImDrawList_AddCallback(ImDrawList_ctx, ImDrawCallback_callback, void_callback_data)
  if void_callback_data == nil then log("E", "", "Parameter 'void_callback_data' of function 'AddCallback' cannot be nil, as the c type is 'void *'") ; return end
  ImDrawList_ctx:AddCallback(ImDrawCallback_callback, void_callback_data)
end
function M.ImDrawList_AddDrawCmd(ImDrawList_ctx) ImDrawList_ctx:AddDrawCmd() end
function M.ImDrawList_CloneOutput(ImDrawList_ctx) return ImDrawList_ctx:CloneOutput() end
function M.ImDrawList_ChannelsSplit(ImDrawList_ctx, int_count) ImDrawList_ctx:ChannelsSplit(int_count) end
function M.ImDrawList_ChannelsMerge(ImDrawList_ctx) ImDrawList_ctx:ChannelsMerge() end
function M.ImDrawList_ChannelsSetCurrent(ImDrawList_ctx, int_n) ImDrawList_ctx:ChannelsSetCurrent(int_n) end
function M.ImDrawList_PrimReserve(ImDrawList_ctx, int_idx_count, int_vtx_count) ImDrawList_ctx:PrimReserve(int_idx_count, int_vtx_count) end
function M.ImDrawList_PrimUnreserve(ImDrawList_ctx, int_idx_count, int_vtx_count) ImDrawList_ctx:PrimUnreserve(int_idx_count, int_vtx_count) end
function M.ImDrawList_PrimRect(ImDrawList_ctx, ImVec2_a, ImVec2_b, ImU32_col) ImDrawList_ctx:PrimRect(ImVec2_a, ImVec2_b, ImU32_col) end
function M.ImDrawList_PrimRectUV(ImDrawList_ctx, ImVec2_a, ImVec2_b, ImVec2_uv_a, ImVec2_uv_b, ImU32_col) ImDrawList_ctx:PrimRectUV(ImVec2_a, ImVec2_b, ImVec2_uv_a, ImVec2_uv_b, ImU32_col) end
function M.ImDrawList_PrimQuadUV(ImDrawList_ctx, ImVec2_a, ImVec2_b, ImVec2_c, ImVec2_d, ImVec2_uv_a, ImVec2_uv_b, ImVec2_uv_c, ImVec2_uv_d, ImU32_col) ImDrawList_ctx:PrimQuadUV(ImVec2_a, ImVec2_b, ImVec2_c, ImVec2_d, ImVec2_uv_a, ImVec2_uv_b, ImVec2_uv_c, ImVec2_uv_d, ImU32_col) end
function M.ImDrawList_PrimWriteVtx(ImDrawList_ctx, ImVec2_pos, ImVec2_uv, ImU32_col) ImDrawList_ctx:PrimWriteVtx(ImVec2_pos, ImVec2_uv, ImU32_col) end
function M.ImDrawList_PrimWriteIdx(ImDrawList_ctx, int_idx) ImDrawList_ctx:PrimWriteIdx(int_idx) end
function M.ImDrawList_PrimVtx(ImDrawList_ctx, ImVec2_pos, ImVec2_uv, ImU32_col) ImDrawList_ctx:PrimVtx(ImVec2_pos, ImVec2_uv, ImU32_col) end
function M.ImDrawList__ResetForNewFrame(ImDrawList_ctx) ImDrawList_ctx:_ResetForNewFrame() end
function M.ImDrawList__ClearFreeMemory(ImDrawList_ctx) ImDrawList_ctx:_ClearFreeMemory() end
function M.ImDrawList__PopUnusedDrawCmd(ImDrawList_ctx) ImDrawList_ctx:_PopUnusedDrawCmd() end
function M.ImDrawList__TryMergeDrawCmds(ImDrawList_ctx) ImDrawList_ctx:_TryMergeDrawCmds() end
function M.ImDrawList__OnChangedClipRect(ImDrawList_ctx) ImDrawList_ctx:_OnChangedClipRect() end
function M.ImDrawList__OnChangedTextureID(ImDrawList_ctx) ImDrawList_ctx:_OnChangedTextureID() end
function M.ImDrawList__OnChangedVtxOffset(ImDrawList_ctx) ImDrawList_ctx:_OnChangedVtxOffset() end
function M.ImDrawList__CalcCircleAutoSegmentCount(ImDrawList_ctx, float_radius) return ImDrawList_ctx:_CalcCircleAutoSegmentCount(float_radius) end
function M.ImDrawList__PathArcToFastEx(ImDrawList_ctx, ImVec2_center, float_radius, int_a_min_sample, int_a_max_sample, int_a_step) ImDrawList_ctx:_PathArcToFastEx(ImVec2_center, float_radius, int_a_min_sample, int_a_max_sample, int_a_step) end
function M.ImDrawList__PathArcToN(ImDrawList_ctx, ImVec2_center, float_radius, float_a_min, float_a_max, int_num_segments) ImDrawList_ctx:_PathArcToN(ImVec2_center, float_radius, float_a_min, float_a_max, int_num_segments) end
--===
--=== enum ImFontAtlasFlags_ ===
M.ImFontAtlasFlags_None = imgui.enum.ImFontAtlasFlags_None
M.ImFontAtlasFlags_NoPowerOfTwoHeight = imgui.enum.ImFontAtlasFlags_NoPowerOfTwoHeight
M.ImFontAtlasFlags_NoMouseCursors = imgui.enum.ImFontAtlasFlags_NoMouseCursors
M.ImFontAtlasFlags_NoBakedLines = imgui.enum.ImFontAtlasFlags_NoBakedLines
--===
--=== enum ImGuiViewportFlags_ ===
M.ViewportFlags_None = imgui.enum.ImGuiViewportFlags_None
M.ViewportFlags_IsPlatformWindow = imgui.enum.ImGuiViewportFlags_IsPlatformWindow
M.ViewportFlags_IsPlatformMonitor = imgui.enum.ImGuiViewportFlags_IsPlatformMonitor
M.ViewportFlags_OwnedByApp = imgui.enum.ImGuiViewportFlags_OwnedByApp
M.ViewportFlags_NoDecoration = imgui.enum.ImGuiViewportFlags_NoDecoration
M.ViewportFlags_NoTaskBarIcon = imgui.enum.ImGuiViewportFlags_NoTaskBarIcon
M.ViewportFlags_NoFocusOnAppearing = imgui.enum.ImGuiViewportFlags_NoFocusOnAppearing
M.ViewportFlags_NoFocusOnClick = imgui.enum.ImGuiViewportFlags_NoFocusOnClick
M.ViewportFlags_NoInputs = imgui.enum.ImGuiViewportFlags_NoInputs
M.ViewportFlags_NoRendererClear = imgui.enum.ImGuiViewportFlags_NoRendererClear
M.ViewportFlags_NoAutoMerge = imgui.enum.ImGuiViewportFlags_NoAutoMerge
M.ViewportFlags_TopMost = imgui.enum.ImGuiViewportFlags_TopMost
M.ViewportFlags_CanHostOtherWindows = imgui.enum.ImGuiViewportFlags_CanHostOtherWindows
M.ViewportFlags_IsMinimized = imgui.enum.ImGuiViewportFlags_IsMinimized
M.ViewportFlags_IsFocused = imgui.enum.ImGuiViewportFlags_IsFocused
--===
--=== struct ImGuiViewport ===
function M.ImGuiViewport() return imgui.ImGuiViewport() end
function M.ImGuiViewportPtr() return imgui.ImGuiViewport() end
function M.ImGuiViewport_GetCenter(ImGuiViewport_ctx) return ImGuiViewport_ctx:GetCenter() end
function M.ImGuiViewport_GetWorkCenter(ImGuiViewport_ctx) return ImGuiViewport_ctx:GetWorkCenter() end
--===
--=== struct ImGuiPlatformIO ===
function M.ImGuiPlatformIO() return imgui.ImGuiPlatformIO() end
function M.ImGuiPlatformIOPtr() return imgui.ImGuiPlatformIO() end
--===
--=== struct ImGuiPlatformMonitor ===
function M.ImGuiPlatformMonitor() return imgui.ImGuiPlatformMonitor() end
function M.ImGuiPlatformMonitorPtr() return imgui.ImGuiPlatformMonitor() end
--===
--=== struct ImGuiPlatformImeData ===
function M.ImGuiPlatformImeData() return imgui.ImGuiPlatformImeData() end
function M.ImGuiPlatformImeDataPtr() return imgui.ImGuiPlatformImeData() end
--===
function M.GetKeyIndex(ImGuiKey_key) return imgui.GetKeyIndex(ImGuiKey_key) end

end -- global function close
